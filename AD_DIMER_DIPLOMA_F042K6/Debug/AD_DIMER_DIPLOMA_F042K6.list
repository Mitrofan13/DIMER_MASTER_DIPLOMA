
AD_DIMER_DIPLOMA_F042K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000003c  08003d8c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003d8c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010128  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252c  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000326b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b4  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ffe  00000000  00000000  0004d174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ad2  00000000  00000000  0005e172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eec44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000eec94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cf8 	.word	0x08003cf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08003cf8 	.word	0x08003cf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f003 fc70 	bl	8003ce8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000408:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_ADC_Init+0xb0>)
 800040a:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <MX_ADC_Init+0xb4>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000414:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <MX_ADC_Init+0xb0>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000422:	2201      	movs	r2, #1
 8000424:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000428:	2204      	movs	r2, #4
 800042a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <MX_ADC_Init+0xb0>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <MX_ADC_Init+0xb0>)
 800043a:	2200      	movs	r2, #0
 800043c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000440:	2200      	movs	r2, #0
 8000442:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000446:	22c2      	movs	r2, #194	; 0xc2
 8000448:	32ff      	adds	r2, #255	; 0xff
 800044a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_ADC_Init+0xb0>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000454:	2224      	movs	r2, #36	; 0x24
 8000456:	2100      	movs	r1, #0
 8000458:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_ADC_Init+0xb0>)
 800045c:	2201      	movs	r2, #1
 800045e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_ADC_Init+0xb0>)
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fcbc 	bl	8000de0 <HAL_ADC_Init>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800046c:	f000 f9ba 	bl	80007e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2201      	movs	r2, #1
 8000474:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0152      	lsls	r2, r2, #5
 800047c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0552      	lsls	r2, r2, #21
 8000484:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000486:	1d3a      	adds	r2, r7, #4
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_ADC_Init+0xb0>)
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fea3 	bl	80011d8 <HAL_ADC_ConfigChannel>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 f9a5 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b004      	add	sp, #16
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	20000058 	.word	0x20000058
 80004a8:	40012400 	.word	0x40012400

080004ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08b      	sub	sp, #44	; 0x2c
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	2414      	movs	r4, #20
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	0018      	movs	r0, r3
 80004ba:	2314      	movs	r3, #20
 80004bc:	001a      	movs	r2, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	f003 fc12 	bl	8003ce8 <memset>
  if(adcHandle->Instance==ADC1)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a1d      	ldr	r2, [pc, #116]	; (8000540 <HAL_ADC_MspInit+0x94>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d133      	bne.n	8000536 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0089      	lsls	r1, r1, #2
 80004d8:	430a      	orrs	r2, r1
 80004da:	619a      	str	r2, [r3, #24]
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	4013      	ands	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b16      	ldr	r3, [pc, #88]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_ADC_MspInit+0x98>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2202      	movs	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2203      	movs	r2, #3
 8000510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	193a      	adds	r2, r7, r4
 800051a:	2390      	movs	r3, #144	; 0x90
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	0011      	movs	r1, r2
 8000520:	0018      	movs	r0, r3
 8000522:	f001 f8c3 	bl	80016ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	200c      	movs	r0, #12
 800052c:	f001 f80e 	bl	800154c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000530:	200c      	movs	r0, #12
 8000532:	f001 f820 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00b      	add	sp, #44	; 0x2c
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40012400 	.word	0x40012400
 8000544:	40021000 	.word	0x40021000

08000548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b089      	sub	sp, #36	; 0x24
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	240c      	movs	r4, #12
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2314      	movs	r3, #20
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 fbc5 	bl	8003ce8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b3d      	ldr	r3, [pc, #244]	; (8000654 <MX_GPIO_Init+0x10c>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <MX_GPIO_Init+0x10c>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	03c9      	lsls	r1, r1, #15
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b39      	ldr	r3, [pc, #228]	; (8000654 <MX_GPIO_Init+0x10c>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	03db      	lsls	r3, r3, #15
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b36      	ldr	r3, [pc, #216]	; (8000654 <MX_GPIO_Init+0x10c>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b35      	ldr	r3, [pc, #212]	; (8000654 <MX_GPIO_Init+0x10c>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b32      	ldr	r3, [pc, #200]	; (8000654 <MX_GPIO_Init+0x10c>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <MX_GPIO_Init+0x10c>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <MX_GPIO_Init+0x10c>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	02c9      	lsls	r1, r1, #11
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_GPIO_Init+0x10c>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	02db      	lsls	r3, r3, #11
 80005ac:	4013      	ands	r3, r2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIM_CH8_Pin|DIM_CH7_Pin|DIM_CH6_Pin|DIM_CH5_Pin
 80005b2:	23fc      	movs	r3, #252	; 0xfc
 80005b4:	0099      	lsls	r1, r3, #2
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2200      	movs	r2, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f9dd 	bl	800197c <HAL_GPIO_WritePin>
                          |DIM_CH2_Pin|DIM_CH1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIM_CH4_Pin|DIM_CH3_Pin|ST_LED_Pin, GPIO_PIN_RESET);
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_GPIO_Init+0x110>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	210b      	movs	r1, #11
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f9d7 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DIM_CH8_Pin|DIM_CH7_Pin|DIM_CH6_Pin|DIM_CH5_Pin
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	22fc      	movs	r2, #252	; 0xfc
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
                          |DIM_CH2_Pin|DIM_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2201      	movs	r2, #1
 80005da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	193a      	adds	r2, r7, r4
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 f85b 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIM_CH4_Pin|DIM_CH3_Pin|ST_LED_Pin;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	220b      	movs	r2, #11
 80005fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2201      	movs	r2, #1
 8000600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	193b      	adds	r3, r7, r4
 8000610:	4a11      	ldr	r2, [pc, #68]	; (8000658 <MX_GPIO_Init+0x110>)
 8000612:	0019      	movs	r1, r3
 8000614:	0010      	movs	r0, r2
 8000616:	f001 f849 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ZERO_Pin;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2210      	movs	r2, #16
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2288      	movs	r2, #136	; 0x88
 8000626:	0352      	lsls	r2, r2, #13
 8000628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZERO_GPIO_Port, &GPIO_InitStruct);
 8000630:	187b      	adds	r3, r7, r1
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <MX_GPIO_Init+0x110>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f001 f838 	bl	80016ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2007      	movs	r0, #7
 8000642:	f000 ff83 	bl	800154c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000646:	2007      	movs	r0, #7
 8000648:	f000 ff95 	bl	8001576 <HAL_NVIC_EnableIRQ>

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b009      	add	sp, #36	; 0x24
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fb5a 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f814 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f7ff ff6e 	bl	8000548 <MX_GPIO_Init>
  MX_ADC_Init();
 800066c:	f7ff fec2 	bl	80003f4 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000670:	f000 fa8a 	bl	8000b88 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000674:	f000 fa3a 	bl	8000aec <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, receiveBuffer, BUFFER_SIZE);
 8000678:	4903      	ldr	r1, [pc, #12]	; (8000688 <main+0x2c>)
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <main+0x30>)
 800067c:	2209      	movs	r2, #9
 800067e:	0018      	movs	r0, r3
 8000680:	f002 f98c 	bl	800299c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x28>
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000098 	.word	0x20000098
 800068c:	20000140 	.word	0x20000140

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b093      	sub	sp, #76	; 0x4c
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2334      	movs	r3, #52	; 0x34
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f003 fb21 	bl	8003ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f003 fb1a 	bl	8003ce8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2230      	movs	r2, #48	; 0x30
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 f994 	bl	8001a04 <HAL_RCC_OscConfig>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80006e0:	f000 f880 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2207      	movs	r2, #7
 80006e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2203      	movs	r2, #3
 80006ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2101      	movs	r1, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fd05 	bl	8002110 <HAL_RCC_ClockConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800070a:	f000 f86b 	bl	80007e4 <Error_Handler>
  }
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b013      	add	sp, #76	; 0x4c
 8000714:	bd90      	pop	{r4, r7, pc}
	...

08000718 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
//	        HAL_TIM_Base_Stop_IT(HandleTIMs[i]);  // О�?танній параметр автоматично визначаєть�?�? за допомогою індек�?у
//	        HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_SET);
//		}
//	}

	HAL_TIM_Base_Stop_IT(&htim14);
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fefc 	bl	8002520 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(DIM_CH1_GPIO_Port, DIM_CH1_Pin, GPIO_PIN_SET);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	0099      	lsls	r1, r3, #2
 800072c:	2390      	movs	r3, #144	; 0x90
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2201      	movs	r2, #1
 8000732:	0018      	movs	r0, r3
 8000734:	f001 f922 	bl	800197c <HAL_GPIO_WritePin>
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000f8 	.word	0x200000f8

08000744 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <HAL_UART_RxCpltCallback+0x80>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d132      	bne.n	80007bc <HAL_UART_RxCpltCallback+0x78>
  {
    // USART1 завершил прием данных
	  HAL_UART_Receive_IT(&huart2, receiveBuffer, BUFFER_SIZE);
 8000756:	491c      	ldr	r1, [pc, #112]	; (80007c8 <HAL_UART_RxCpltCallback+0x84>)
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_UART_RxCpltCallback+0x88>)
 800075a:	2209      	movs	r2, #9
 800075c:	0018      	movs	r0, r3
 800075e:	f002 f91d 	bl	800299c <HAL_UART_Receive_IT>

	for(uint8_t i = 0; i<DIM_AMOUNT; i++)
 8000762:	230f      	movs	r3, #15
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e022      	b.n	80007b2 <HAL_UART_RxCpltCallback+0x6e>
//		if(dim_par.mode_flag[i] == ZERO_CROSS_MODE)
//		{
//			dim_par.dimmer[i] = adc_value.adc_value; //dimmer[0:255] adc_value[0:255]
//		}

		myDimmer[i].mode    = (receiveBuffer[8] & (0b00000001)<<i)>>i;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_UART_RxCpltCallback+0x84>)
 800076e:	7a1b      	ldrb	r3, [r3, #8]
 8000770:	0019      	movs	r1, r3
 8000772:	200f      	movs	r0, #15
 8000774:	183b      	adds	r3, r7, r0
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2201      	movs	r2, #1
 800077a:	409a      	lsls	r2, r3
 800077c:	0013      	movs	r3, r2
 800077e:	4019      	ands	r1, r3
 8000780:	183b      	adds	r3, r7, r0
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	183a      	adds	r2, r7, r0
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	4119      	asrs	r1, r3
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_UART_RxCpltCallback+0x8c>)
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	50d1      	str	r1, [r2, r3]
		myDimmer[i].dim_val = receiveBuffer[i];
 8000790:	183b      	adds	r3, r7, r0
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <HAL_UART_RxCpltCallback+0x84>)
 8000796:	5cd2      	ldrb	r2, [r2, r3]
 8000798:	183b      	adds	r3, r7, r0
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	0011      	movs	r1, r2
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <HAL_UART_RxCpltCallback+0x8c>)
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	18d3      	adds	r3, r2, r3
 80007a4:	3304      	adds	r3, #4
 80007a6:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i<DIM_AMOUNT; i++)
 80007a8:	183b      	adds	r3, r7, r0
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	3201      	adds	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	230f      	movs	r3, #15
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	d9d7      	bls.n	800076c <HAL_UART_RxCpltCallback+0x28>
	}
  }
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b004      	add	sp, #16
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40004400 	.word	0x40004400
 80007c8:	20000098 	.word	0x20000098
 80007cc:	20000140 	.word	0x20000140
 80007d0:	200000a4 	.word	0x200000a4

080007d4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
    // USART2 завершил отправку данных
  }
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b002      	add	sp, #8
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	619a      	str	r2, [r3, #24]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	2201      	movs	r2, #1
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0549      	lsls	r1, r1, #21
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_MspInit+0x44>)
 800081e:	69da      	ldr	r2, [r3, #28]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	055b      	lsls	r3, r3, #21
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 faa4 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0


//--------------------FIRING_ANGLE---------------------------------------------


	for(uint8_t i = 0; i < DIM_AMOUNT; i++)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e0f3      	b.n	8000a5e <EXTI4_15_IRQHandler+0x1f6>
	{
		if(myDimmer[i].mode == FIRING_ANGLE_MODE)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b7f      	ldr	r3, [pc, #508]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 800087c:	00d2      	lsls	r2, r2, #3
 800087e:	58d3      	ldr	r3, [r2, r3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d158      	bne.n	8000936 <EXTI4_15_IRQHandler+0xce>
		{
			if(myDimmer[i].dim_val == MAX_DIM_VAL)
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4a7b      	ldr	r2, [pc, #492]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	3304      	adds	r3, #4
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b64      	cmp	r3, #100	; 0x64
 8000894:	d10e      	bne.n	80008b4 <EXTI4_15_IRQHandler+0x4c>
			{
				HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_SET);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	58d0      	ldr	r0, [r2, r3]
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b76      	ldr	r3, [pc, #472]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	5ad3      	ldrh	r3, [r2, r3]
 80008aa:	2201      	movs	r2, #1
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 f865 	bl	800197c <HAL_GPIO_WritePin>
 80008b2:	e0cf      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
			}
			else if(myDimmer[i].dim_val == MIN_DIM_VAL)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a6f      	ldr	r2, [pc, #444]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	3304      	adds	r3, #4
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10e      	bne.n	80008e4 <EXTI4_15_IRQHandler+0x7c>
			{
				HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_RESET);
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	58d0      	ldr	r0, [r2, r3]
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	5ad3      	ldrh	r3, [r2, r3]
 80008da:	2200      	movs	r2, #0
 80008dc:	0019      	movs	r1, r3
 80008de:	f001 f84d 	bl	800197c <HAL_GPIO_WritePin>
 80008e2:	e0b7      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
			}
			else
			{
				HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_RESET); //move to main.c
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	58d0      	ldr	r0, [r2, r3]
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 80008f4:	0052      	lsls	r2, r2, #1
 80008f6:	5ad3      	ldrh	r3, [r2, r3]
 80008f8:	2200      	movs	r2, #0
 80008fa:	0019      	movs	r1, r3
 80008fc:	f001 f83e 	bl	800197c <HAL_GPIO_WritePin>
				dim_tim_count = MAX_DIM_VAL - myDimmer[i].dim_val;
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4a5c      	ldr	r2, [pc, #368]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2264      	movs	r2, #100	; 0x64
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <EXTI4_15_IRQHandler+0x21c>)
 8000918:	701a      	strb	r2, [r3, #0]
				//ARR = TIM CLOCK / FREQUENCY ;ARR =  prescaler * count_period
				TIM14->ARR = dim_tim_count;
 800091a:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <EXTI4_15_IRQHandler+0x21c>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b5a      	ldr	r3, [pc, #360]	; (8000a88 <EXTI4_15_IRQHandler+0x220>)
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
				if(i == 0)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <EXTI4_15_IRQHandler+0xc4>
 800092a:	e093      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
				{
					HAL_TIM_Base_Start_IT(&htim14);
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <EXTI4_15_IRQHandler+0x224>)
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fdaa 	bl	8002488 <HAL_TIM_Base_Start_IT>
 8000934:	e08e      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
			}
		}

		//--------------------ZERO_CROS_MODE---------------------------------------------

		else if(myDimmer[i].mode == ZERO_CROS_MODE)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	58d3      	ldr	r3, [r2, r3]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d000      	beq.n	8000946 <EXTI4_15_IRQHandler+0xde>
 8000944:	e086      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
		{
			if(myDimmer[i].dim_val == MAX_DIM_VAL)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	18d3      	adds	r3, r2, r3
 8000950:	3304      	adds	r3, #4
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b64      	cmp	r3, #100	; 0x64
 8000956:	d113      	bne.n	8000980 <EXTI4_15_IRQHandler+0x118>
			{
				HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_SET);
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	58d0      	ldr	r0, [r2, r3]
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 8000968:	0052      	lsls	r2, r2, #1
 800096a:	5ad3      	ldrh	r3, [r2, r3]
 800096c:	2201      	movs	r2, #1
 800096e:	0019      	movs	r1, r3
 8000970:	f001 f804 	bl	800197c <HAL_GPIO_WritePin>
				walves_counter[i] = 0;
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 800097a:	2100      	movs	r1, #0
 800097c:	54d1      	strb	r1, [r2, r3]
 800097e:	e069      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
			}
			else if(myDimmer[i].dim_val == MIN_DIM_VAL)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4a3c      	ldr	r2, [pc, #240]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	3304      	adds	r3, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d113      	bne.n	80009ba <EXTI4_15_IRQHandler+0x152>
			{
				HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_RESET);
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	58d0      	ldr	r0, [r2, r3]
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	5ad3      	ldrh	r3, [r2, r3]
 80009a6:	2200      	movs	r2, #0
 80009a8:	0019      	movs	r1, r3
 80009aa:	f000 ffe7 	bl	800197c <HAL_GPIO_WritePin>
				walves_counter[i] = 0;
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	54d1      	strb	r1, [r2, r3]
 80009b8:	e04c      	b.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
			}
			else
			{
				allowed_walves[i] = myDimmer[i].dim_val * WALVES_COUFICIENT;
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <EXTI4_15_IRQHandler+0x210>)
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	18d3      	adds	r3, r2, r3
 80009c4:	3304      	adds	r3, #4
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	2164      	movs	r1, #100	; 0x64
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fc25 	bl	800021c <__divsi3>
 80009d2:	0003      	movs	r3, r0
 80009d4:	001a      	movs	r2, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <EXTI4_15_IRQHandler+0x22c>)
 80009de:	54d1      	strb	r1, [r2, r3]

				if(walves_counter[i] < allowed_walves[i])
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 80009e6:	5cd2      	ldrb	r2, [r2, r3]
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4929      	ldr	r1, [pc, #164]	; (8000a94 <EXTI4_15_IRQHandler+0x22c>)
 80009ee:	5ccb      	ldrb	r3, [r1, r3]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d20e      	bcs.n	8000a12 <EXTI4_15_IRQHandler+0x1aa>
				{
					HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_SET);
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 80009fa:	0092      	lsls	r2, r2, #2
 80009fc:	58d0      	ldr	r0, [r2, r3]
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	5ad3      	ldrh	r3, [r2, r3]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 ffb6 	bl	800197c <HAL_GPIO_WritePin>
 8000a10:	e00d      	b.n	8000a2e <EXTI4_15_IRQHandler+0x1c6>
				}
				else
				{
					HAL_GPIO_WritePin(dimPorts[i], dimPins[i], GPIO_PIN_RESET);
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <EXTI4_15_IRQHandler+0x214>)
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	58d0      	ldr	r0, [r2, r3]
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <EXTI4_15_IRQHandler+0x218>)
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	5ad3      	ldrh	r3, [r2, r3]
 8000a26:	2200      	movs	r2, #0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	f000 ffa7 	bl	800197c <HAL_GPIO_WritePin>
				}
				walves_counter[i]++;
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 8000a34:	5cd2      	ldrb	r2, [r2, r3]
 8000a36:	3201      	adds	r2, #1
 8000a38:	b2d1      	uxtb	r1, r2
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 8000a3c:	54d1      	strb	r1, [r2, r3]
				if(walves_counter[i] == MAX_WALVES)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 8000a44:	5cd3      	ldrb	r3, [r2, r3]
 8000a46:	2b40      	cmp	r3, #64	; 0x40
 8000a48:	d104      	bne.n	8000a54 <EXTI4_15_IRQHandler+0x1ec>
				{
					walves_counter[i] = 0;
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <EXTI4_15_IRQHandler+0x228>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < DIM_AMOUNT; i++)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	1dfb      	adds	r3, r7, #7
 8000a5a:	3201      	adds	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b07      	cmp	r3, #7
 8000a64:	d800      	bhi.n	8000a68 <EXTI4_15_IRQHandler+0x200>
 8000a66:	e706      	b.n	8000876 <EXTI4_15_IRQHandler+0xe>
	}



  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZERO_Pin);
 8000a68:	2010      	movs	r0, #16
 8000a6a:	f000 ffa5 	bl	80019b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200000a4 	.word	0x200000a4
 8000a7c:	20000010 	.word	0x20000010
 8000a80:	20000000 	.word	0x20000000
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	40002000 	.word	0x40002000
 8000a8c:	200000f8 	.word	0x200000f8
 8000a90:	200000f0 	.word	0x200000f0
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <ADC1_IRQHandler+0x14>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fade 	bl	8001060 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	20000058 	.word	0x20000058

08000ab0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <TIM14_IRQHandler+0x14>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fd60 	bl	800257c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	200000f8 	.word	0x200000f8

08000ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <USART2_IRQHandler+0x14>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 ffbc 	bl	8002a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000140 	.word	0x20000140

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <MX_TIM14_Init+0x44>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4800-1;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <MX_TIM14_Init+0x48>)
 8000afa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <MX_TIM14_Init+0x40>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fc66 	bl	80023e8 <HAL_TIM_Base_Init>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b20:	f7ff fe60 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	40002000 	.word	0x40002000
 8000b34:	000012bf 	.word	0x000012bf

08000b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_TIM_Base_MspInit+0x48>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d115      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b4c:	69da      	ldr	r2, [r3, #28]
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0049      	lsls	r1, r1, #1
 8000b54:	430a      	orrs	r2, r1
 8000b56:	61da      	str	r2, [r3, #28]
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_TIM_Base_MspInit+0x4c>)
 8000b5a:	69da      	ldr	r2, [r3, #28]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2013      	movs	r0, #19
 8000b6c:	f000 fcee 	bl	800154c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000b70:	2013      	movs	r0, #19
 8000b72:	f000 fd00 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40002000 	.word	0x40002000
 8000b84:	40021000 	.word	0x40021000

08000b88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b8e:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_USART2_UART_Init+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b94:	22e1      	movs	r2, #225	; 0xe1
 8000b96:	0252      	lsls	r2, r2, #9
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x58>)
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 fe91 	bl	80028f4 <HAL_UART_Init>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f7ff fe05 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000140 	.word	0x20000140
 8000be4:	40004400 	.word	0x40004400

08000be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b08b      	sub	sp, #44	; 0x2c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	2414      	movs	r4, #20
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f003 f874 	bl	8003ce8 <memset>
  if(uartHandle->Instance==USART2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <HAL_UART_MspInit+0xa0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d13a      	bne.n	8000c80 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c0c:	69da      	ldr	r2, [r3, #28]
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0289      	lsls	r1, r1, #10
 8000c14:	430a      	orrs	r2, r1
 8000c16:	61da      	str	r2, [r3, #28]
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c1a:	69da      	ldr	r2, [r3, #28]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0289      	lsls	r1, r1, #10
 8000c30:	430a      	orrs	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0xa4>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	029b      	lsls	r3, r3, #10
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000c42:	0021      	movs	r1, r4
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_UART_MspInit+0xa8>)
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	2390      	movs	r3, #144	; 0x90
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fd1e 	bl	80016ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	201c      	movs	r0, #28
 8000c76:	f000 fc69 	bl	800154c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c7a:	201c      	movs	r0, #28
 8000c7c:	f000 fc7b 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b00b      	add	sp, #44	; 0x2c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	00008004 	.word	0x00008004

08000c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff ff22 	bl	8000ae0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000c9e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ca0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <LoopForever+0xa>)
    CMP R1, R2
 8000ca4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ca6:	d105      	bne.n	8000cb4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000caa:	4912      	ldr	r1, [pc, #72]	; (8000cf4 <LoopForever+0x12>)
    STR R1, [R0]
 8000cac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000cae:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000cb0:	4912      	ldr	r1, [pc, #72]	; (8000cfc <LoopForever+0x1a>)
    STR R1, [R0]
 8000cb2:	6001      	str	r1, [r0, #0]

08000cb4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000cb6:	4913      	ldr	r1, [pc, #76]	; (8000d04 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000cb8:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <LoopForever+0x26>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ccc:	4c10      	ldr	r4, [pc, #64]	; (8000d10 <LoopForever+0x2e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f002 ffe1 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff fcbd 	bl	800065c <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ce8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000cec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000cf0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000cf4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000cf8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000cfc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000d08:	08003d50 	.word	0x08003d50
  ldr r2, =_sbss
 8000d0c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000d10:	200001cc 	.word	0x200001cc

08000d14 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <CEC_CAN_IRQHandler>
	...

08000d18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_Init+0x24>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_Init+0x24>)
 8000d22:	2110      	movs	r1, #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f809 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2e:	f7ff fd5f 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x60>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	0019      	movs	r1, r3
 8000d52:	23fa      	movs	r3, #250	; 0xfa
 8000d54:	0098      	lsls	r0, r3, #2
 8000d56:	f7ff f9d7 	bl	8000108 <__udivsi3>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f7ff f9d2 	bl	8000108 <__udivsi3>
 8000d64:	0003      	movs	r3, r0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 fc15 	bl	8001596 <HAL_SYSTICK_Config>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e00f      	b.n	8000d94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d80b      	bhi.n	8000d92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	425b      	negs	r3, r3
 8000d80:	2200      	movs	r2, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fbe2 	bl	800154c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_InitTick+0x64>)
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	20000030 	.word	0x20000030
 8000da0:	20000038 	.word	0x20000038
 8000da4:	20000034 	.word	0x20000034

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	18d2      	adds	r2, r2, r3
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	20000038 	.word	0x20000038
 8000dc8:	200001c8 	.word	0x200001c8

08000dcc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	200001c8 	.word	0x200001c8

08000de0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de8:	230f      	movs	r3, #15
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e125      	b.n	800104a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10a      	bne.n	8000e1c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fb48 	bl	80004ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e20:	2210      	movs	r2, #16
 8000e22:	4013      	ands	r3, r2
 8000e24:	d000      	beq.n	8000e28 <HAL_ADC_Init+0x48>
 8000e26:	e103      	b.n	8001030 <HAL_ADC_Init+0x250>
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d000      	beq.n	8000e34 <HAL_ADC_Init+0x54>
 8000e32:	e0fd      	b.n	8001030 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e3e:	d000      	beq.n	8000e42 <HAL_ADC_Init+0x62>
 8000e40:	e0f6      	b.n	8001030 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e46:	4a83      	ldr	r2, [pc, #524]	; (8001054 <HAL_ADC_Init+0x274>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d112      	bne.n	8000e86 <HAL_ADC_Init+0xa6>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2201      	movs	r2, #1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d009      	beq.n	8000e82 <HAL_ADC_Init+0xa2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	401a      	ands	r2, r3
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d101      	bne.n	8000e86 <HAL_ADC_Init+0xa6>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_ADC_Init+0xa8>
 8000e86:	2300      	movs	r3, #0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d116      	bne.n	8000eba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2218      	movs	r2, #24
 8000e94:	4393      	bics	r3, r2
 8000e96:	0019      	movs	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	0899      	lsrs	r1, r3, #2
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4964      	ldr	r1, [pc, #400]	; (8001058 <HAL_ADC_Init+0x278>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7e1b      	ldrb	r3, [r3, #24]
 8000ece:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e5b      	ldrb	r3, [r3, #25]
 8000ed4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ed6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e9b      	ldrb	r3, [r3, #26]
 8000edc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ede:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d002      	beq.n	8000eee <HAL_ADC_Init+0x10e>
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	015b      	lsls	r3, r3, #5
 8000eec:	e000      	b.n	8000ef0 <HAL_ADC_Init+0x110>
 8000eee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ef0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ef6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d101      	bne.n	8000f04 <HAL_ADC_Init+0x124>
 8000f00:	2304      	movs	r3, #4
 8000f02:	e000      	b.n	8000f06 <HAL_ADC_Init+0x126>
 8000f04:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2124      	movs	r1, #36	; 0x24
 8000f0c:	5c5b      	ldrb	r3, [r3, r1]
 8000f0e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7edb      	ldrb	r3, [r3, #27]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d115      	bne.n	8000f4c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7e9b      	ldrb	r3, [r3, #26]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0252      	lsls	r2, r2, #9
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	e00b      	b.n	8000f4c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f38:	2220      	movs	r2, #32
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f44:	2201      	movs	r2, #1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	23c2      	movs	r3, #194	; 0xc2
 8000f52:	33ff      	adds	r3, #255	; 0xff
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d007      	beq.n	8000f68 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f60:	4313      	orrs	r3, r2
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68d9      	ldr	r1, [r3, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	055b      	lsls	r3, r3, #21
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d01b      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d017      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d013      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d00f      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00b      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d007      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb0:	2b06      	cmp	r3, #6
 8000fb2:	d003      	beq.n	8000fbc <HAL_ADC_Init+0x1dc>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d112      	bne.n	8000fe2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2107      	movs	r1, #7
 8000fc8:	438a      	bics	r2, r1
 8000fca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6959      	ldr	r1, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	401a      	ands	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_ADC_Init+0x27c>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d10b      	bne.n	800100a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4393      	bics	r3, r2
 8001000:	2201      	movs	r2, #1
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001008:	e01c      	b.n	8001044 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	2212      	movs	r2, #18
 8001010:	4393      	bics	r3, r2
 8001012:	2210      	movs	r2, #16
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101e:	2201      	movs	r2, #1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001026:	230f      	movs	r3, #15
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800102e:	e009      	b.n	8001044 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	2210      	movs	r2, #16
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	fffffefd 	.word	0xfffffefd
 8001058:	fffe0219 	.word	0xfffe0219
 800105c:	833fffe7 	.word	0x833fffe7

08001060 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2204      	movs	r2, #4
 800107c:	4013      	ands	r3, r2
 800107e:	d003      	beq.n	8001088 <HAL_ADC_IRQHandler+0x28>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2204      	movs	r2, #4
 8001084:	4013      	ands	r3, r2
 8001086:	d107      	bne.n	8001098 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2208      	movs	r2, #8
 800108c:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800108e:	d049      	beq.n	8001124 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2208      	movs	r2, #8
 8001094:	4013      	ands	r3, r2
 8001096:	d045      	beq.n	8001124 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	2210      	movs	r2, #16
 800109e:	4013      	ands	r3, r2
 80010a0:	d106      	bne.n	80010b0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	23c0      	movs	r3, #192	; 0xc0
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	d12a      	bne.n	8001114 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d126      	bne.n	8001114 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2208      	movs	r2, #8
 80010ca:	4013      	ands	r3, r2
 80010cc:	d022      	beq.n	8001114 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2204      	movs	r2, #4
 80010d6:	4013      	ands	r3, r2
 80010d8:	d110      	bne.n	80010fc <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	210c      	movs	r1, #12
 80010e6:	438a      	bics	r2, r1
 80010e8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <HAL_ADC_IRQHandler+0x144>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
 80010fa:	e00b      	b.n	8001114 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001100:	2220      	movs	r2, #32
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800110c:	2201      	movs	r2, #1
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	0018      	movs	r0, r3
 8001118:	f000 f846 	bl	80011a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	220c      	movs	r2, #12
 8001122:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	4013      	ands	r3, r2
 800112a:	d012      	beq.n	8001152 <HAL_ADC_IRQHandler+0xf2>
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	4013      	ands	r3, r2
 8001132:	d00e      	beq.n	8001152 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	0252      	lsls	r2, r2, #9
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f000 f837 	bl	80011b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2210      	movs	r2, #16
 8001156:	4013      	ands	r3, r2
 8001158:	d020      	beq.n	800119c <HAL_ADC_IRQHandler+0x13c>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2210      	movs	r2, #16
 800115e:	4013      	ands	r3, r2
 8001160:	d01c      	beq.n	800119c <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	2b01      	cmp	r3, #1
 8001168:	d006      	beq.n	8001178 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2201      	movs	r2, #1
 8001172:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10d      	bne.n	8001194 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117c:	2202      	movs	r2, #2
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2210      	movs	r2, #16
 800118a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f81a 	bl	80011c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2210      	movs	r2, #16
 800119a:	601a      	str	r2, [r3, #0]
  }

}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	fffffefe 	.word	0xfffffefe

080011a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e2:	230f      	movs	r3, #15
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	055b      	lsls	r3, r3, #21
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d011      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d00d      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2b02      	cmp	r3, #2
 8001208:	d009      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	2b03      	cmp	r3, #3
 8001210:	d005      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2b04      	cmp	r3, #4
 8001218:	d001      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2234      	movs	r2, #52	; 0x34
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x54>
 8001228:	2302      	movs	r3, #2
 800122a:	e0d0      	b.n	80013ce <HAL_ADC_ConfigChannel+0x1f6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2234      	movs	r2, #52	; 0x34
 8001230:	2101      	movs	r1, #1
 8001232:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d000      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x6a>
 8001240:	e0b4      	b.n	80013ac <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a64      	ldr	r2, [pc, #400]	; (80013d8 <HAL_ADC_ConfigChannel+0x200>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_ADC_ConfigChannel+0x76>
 800124c:	e082      	b.n	8001354 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	409a      	lsls	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	429a      	cmp	r2, r3
 800126e:	d037      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	2b01      	cmp	r3, #1
 8001276:	d033      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b02      	cmp	r3, #2
 800127e:	d02f      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b03      	cmp	r3, #3
 8001286:	d02b      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b04      	cmp	r3, #4
 800128e:	d027      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	2b05      	cmp	r3, #5
 8001296:	d023      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b06      	cmp	r3, #6
 800129e:	d01f      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d01b      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2107      	movs	r1, #7
 80012b4:	400b      	ands	r3, r1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d012      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2107      	movs	r1, #7
 80012c6:	438a      	bics	r2, r1
 80012c8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6959      	ldr	r1, [r3, #20]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2207      	movs	r2, #7
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x120>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b11      	cmp	r3, #17
 80012ee:	d003      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x120>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b12      	cmp	r3, #18
 80012f6:	d163      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_ADC_ConfigChannel+0x204>)
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d009      	beq.n	8001318 <HAL_ADC_ConfigChannel+0x140>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b11      	cmp	r3, #17
 800130a:	d102      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x13a>
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	03db      	lsls	r3, r3, #15
 8001310:	e004      	b.n	800131c <HAL_ADC_ConfigChannel+0x144>
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	045b      	lsls	r3, r3, #17
 8001316:	e001      	b.n	800131c <HAL_ADC_ConfigChannel+0x144>
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <HAL_ADC_ConfigChannel+0x204>)
 800131e:	430b      	orrs	r3, r1
 8001320:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d14a      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_ADC_ConfigChannel+0x208>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	492d      	ldr	r1, [pc, #180]	; (80013e4 <HAL_ADC_ConfigChannel+0x20c>)
 8001330:	0018      	movs	r0, r3
 8001332:	f7fe fee9 	bl	8000108 <__udivsi3>
 8001336:	0003      	movs	r3, r0
 8001338:	001a      	movs	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	189b      	adds	r3, r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x16e>
 8001352:	e035      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2101      	movs	r1, #1
 8001360:	4099      	lsls	r1, r3
 8001362:	000b      	movs	r3, r1
 8001364:	43d9      	mvns	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	400a      	ands	r2, r1
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d007      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x1ae>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b11      	cmp	r3, #17
 800137c:	d003      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x1ae>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b12      	cmp	r3, #18
 8001384:	d11c      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_ADC_ConfigChannel+0x204>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d007      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0x1ca>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b11      	cmp	r3, #17
 8001398:	d101      	bne.n	800139e <HAL_ADC_ConfigChannel+0x1c6>
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_ADC_ConfigChannel+0x210>)
 800139c:	e002      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1cc>
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_ADC_ConfigChannel+0x214>)
 80013a0:	e000      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1cc>
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_ADC_ConfigChannel+0x218>)
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_ADC_ConfigChannel+0x204>)
 80013a6:	400b      	ands	r3, r1
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e009      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	2220      	movs	r2, #32
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2234      	movs	r2, #52	; 0x34
 80013c4:	2100      	movs	r1, #0
 80013c6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013c8:	230f      	movs	r3, #15
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	781b      	ldrb	r3, [r3, #0]
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	00001001 	.word	0x00001001
 80013dc:	40012708 	.word	0x40012708
 80013e0:	20000030 	.word	0x20000030
 80013e4:	000f4240 	.word	0x000f4240
 80013e8:	ffbfffff 	.word	0xffbfffff
 80013ec:	feffffff 	.word	0xfeffffff
 80013f0:	ff7fffff 	.word	0xff7fffff

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0002      	movs	r2, r0
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b7f      	cmp	r3, #127	; 0x7f
 8001406:	d809      	bhi.n	800141c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	001a      	movs	r2, r3
 800140e:	231f      	movs	r3, #31
 8001410:	401a      	ands	r2, r3
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_EnableIRQ+0x30>)
 8001414:	2101      	movs	r1, #1
 8001416:	4091      	lsls	r1, r2
 8001418:	000a      	movs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
  }
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	0002      	movs	r2, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b7f      	cmp	r3, #127	; 0x7f
 800143c:	d828      	bhi.n	8001490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <__NVIC_SetPriority+0xd4>)
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	33c0      	adds	r3, #192	; 0xc0
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	589b      	ldr	r3, [r3, r2]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	; 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <__NVIC_SetPriority+0xd4>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	430a      	orrs	r2, r1
 8001488:	33c0      	adds	r3, #192	; 0xc0
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800148e:	e031      	b.n	80014f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <__NVIC_SetPriority+0xd8>)
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0019      	movs	r1, r3
 8001498:	230f      	movs	r3, #15
 800149a:	400b      	ands	r3, r1
 800149c:	3b08      	subs	r3, #8
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3306      	adds	r3, #6
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1dfa      	adds	r2, r7, #7
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	0011      	movs	r1, r2
 80014b0:	2203      	movs	r2, #3
 80014b2:	400a      	ands	r2, r1
 80014b4:	00d2      	lsls	r2, r2, #3
 80014b6:	21ff      	movs	r1, #255	; 0xff
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	43d2      	mvns	r2, r2
 80014be:	401a      	ands	r2, r3
 80014c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	401a      	ands	r2, r3
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	2303      	movs	r3, #3
 80014d2:	4003      	ands	r3, r0
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <__NVIC_SetPriority+0xd8>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	001c      	movs	r4, r3
 80014e0:	230f      	movs	r3, #15
 80014e2:	4023      	ands	r3, r4
 80014e4:	3b08      	subs	r3, #8
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	430a      	orrs	r2, r1
 80014ea:	3306      	adds	r3, #6
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	18c3      	adds	r3, r0, r3
 80014f0:	3304      	adds	r3, #4
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b003      	add	sp, #12
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	045b      	lsls	r3, r3, #17
 8001514:	429a      	cmp	r2, r3
 8001516:	d301      	bcc.n	800151c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001518:	2301      	movs	r3, #1
 800151a:	e010      	b.n	800153e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <SysTick_Config+0x44>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	3a01      	subs	r2, #1
 8001522:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001524:	2301      	movs	r3, #1
 8001526:	425b      	negs	r3, r3
 8001528:	2103      	movs	r1, #3
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff ff7c 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x44>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x44>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	210f      	movs	r1, #15
 8001558:	187b      	adds	r3, r7, r1
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	187b      	adds	r3, r7, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	0002      	movs	r2, r0
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ff33 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ffaf 	bl	8001504 <SysTick_Config>
 80015a6:	0003      	movs	r3, r0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2221      	movs	r2, #33	; 0x21
 80015bc:	5c9b      	ldrb	r3, [r3, r2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d008      	beq.n	80015d6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2204      	movs	r2, #4
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e020      	b.n	8001618 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	210e      	movs	r1, #14
 80015e2:	438a      	bics	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	438a      	bics	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	2101      	movs	r1, #1
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2221      	movs	r2, #33	; 0x21
 800160a:	2101      	movs	r1, #1
 800160c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	210f      	movs	r1, #15
 800162a:	187b      	adds	r3, r7, r1
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2221      	movs	r2, #33	; 0x21
 8001634:	5c9b      	ldrb	r3, [r3, r2]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d006      	beq.n	800164a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2204      	movs	r2, #4
 8001640:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e028      	b.n	800169c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	210e      	movs	r1, #14
 8001656:	438a      	bics	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001672:	2101      	movs	r1, #1
 8001674:	4091      	lsls	r1, r2
 8001676:	000a      	movs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2221      	movs	r2, #33	; 0x21
 800167e:	2101      	movs	r1, #1
 8001680:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2220      	movs	r2, #32
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	0010      	movs	r0, r2
 800169a:	4798      	blx	r3
    }
  }
  return status;
 800169c:	230f      	movs	r3, #15
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ba:	e149      	b.n	8001950 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2101      	movs	r1, #1
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4091      	lsls	r1, r2
 80016c6:	000a      	movs	r2, r1
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d100      	bne.n	80016d4 <HAL_GPIO_Init+0x28>
 80016d2:	e13a      	b.n	800194a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d005      	beq.n	80016ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d130      	bne.n	800174e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	409a      	lsls	r2, r3
 80016fa:	0013      	movs	r3, r2
 80016fc:	43da      	mvns	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	409a      	lsls	r2, r3
 800170e:	0013      	movs	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	43da      	mvns	r2, r3
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	2201      	movs	r2, #1
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
 8001740:	0013      	movs	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	4013      	ands	r3, r2
 8001756:	2b03      	cmp	r3, #3
 8001758:	d017      	beq.n	800178a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2203      	movs	r2, #3
 8001790:	4013      	ands	r3, r2
 8001792:	2b02      	cmp	r3, #2
 8001794:	d123      	bne.n	80017de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	58d3      	ldr	r3, [r2, r3]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2207      	movs	r2, #7
 80017a8:	4013      	ands	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2107      	movs	r1, #7
 80017c2:	400b      	ands	r3, r1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	08da      	lsrs	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3208      	adds	r2, #8
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	6939      	ldr	r1, [r7, #16]
 80017dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2203      	movs	r2, #3
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	43da      	mvns	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	401a      	ands	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	23c0      	movs	r3, #192	; 0xc0
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x174>
 800181e:	e094      	b.n	800194a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_GPIO_Init+0x2bc>)
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_GPIO_Init+0x2bc>)
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_GPIO_Init+0x2bc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_GPIO_Init+0x2c0>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	589b      	ldr	r3, [r3, r2]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2203      	movs	r2, #3
 800184a:	4013      	ands	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	220f      	movs	r2, #15
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	2390      	movs	r3, #144	; 0x90
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	429a      	cmp	r2, r3
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1d6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a41      	ldr	r2, [pc, #260]	; (8001970 <HAL_GPIO_Init+0x2c4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1d2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a40      	ldr	r2, [pc, #256]	; (8001974 <HAL_GPIO_Init+0x2c8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1ce>
 8001876:	2302      	movs	r3, #2
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x1d8>
 800187a:	2305      	movs	r3, #5
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x1d8>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x1d8>
 8001882:	2300      	movs	r3, #0
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	2103      	movs	r1, #3
 8001888:	400a      	ands	r2, r1
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001894:	4935      	ldr	r1, [pc, #212]	; (800196c <HAL_GPIO_Init+0x2c0>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	035b      	lsls	r3, r3, #13
 80018ba:	4013      	ands	r3, r2
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	4013      	ands	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	029b      	lsls	r3, r3, #10
 800190e:	4013      	ands	r3, r2
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4013      	ands	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_GPIO_Init+0x2cc>)
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	40da      	lsrs	r2, r3
 8001958:	1e13      	subs	r3, r2, #0
 800195a:	d000      	beq.n	800195e <HAL_GPIO_Init+0x2b2>
 800195c:	e6ae      	b.n	80016bc <HAL_GPIO_Init+0x10>
  } 
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b006      	add	sp, #24
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	0008      	movs	r0, r1
 8001986:	0011      	movs	r1, r2
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	1c02      	adds	r2, r0, #0
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	1c7b      	adds	r3, r7, #1
 8001990:	1c0a      	adds	r2, r1, #0
 8001992:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	1c7b      	adds	r3, r7, #1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199c:	1cbb      	adds	r3, r7, #2
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a6:	1cbb      	adds	r3, r7, #2
 80019a8:	881a      	ldrh	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	1dba      	adds	r2, r7, #6
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	4013      	ands	r3, r2
 80019ce:	d008      	beq.n	80019e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80019d2:	1dba      	adds	r2, r7, #6
 80019d4:	8812      	ldrh	r2, [r2, #0]
 80019d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d8:	1dbb      	adds	r3, r7, #6
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	0018      	movs	r0, r3
 80019de:	f000 f807 	bl	80019f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b002      	add	sp, #8
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	0002      	movs	r2, r0
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f000 fb76 	bl	8002104 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_OscConfig+0x20>
 8001a22:	e08e      	b.n	8001b42 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a24:	4bc5      	ldr	r3, [pc, #788]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d00e      	beq.n	8001a4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	4bc2      	ldr	r3, [pc, #776]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	220c      	movs	r2, #12
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d117      	bne.n	8001a6c <HAL_RCC_OscConfig+0x68>
 8001a3c:	4bbf      	ldr	r3, [pc, #764]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	025b      	lsls	r3, r3, #9
 8001a44:	401a      	ands	r2, r3
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d10e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4e:	4bbb      	ldr	r3, [pc, #748]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d100      	bne.n	8001a5c <HAL_RCC_OscConfig+0x58>
 8001a5a:	e071      	b.n	8001b40 <HAL_RCC_OscConfig+0x13c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d000      	beq.n	8001a66 <HAL_RCC_OscConfig+0x62>
 8001a64:	e06c      	b.n	8001b40 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f000 fb4c 	bl	8002104 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x80>
 8001a74:	4bb1      	ldr	r3, [pc, #708]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4bb0      	ldr	r3, [pc, #704]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0249      	lsls	r1, r1, #9
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e02f      	b.n	8001ae4 <HAL_RCC_OscConfig+0xe0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xa2>
 8001a8c:	4bab      	ldr	r3, [pc, #684]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4baa      	ldr	r3, [pc, #680]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a92:	49ab      	ldr	r1, [pc, #684]	; (8001d40 <HAL_RCC_OscConfig+0x33c>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4ba8      	ldr	r3, [pc, #672]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4ba7      	ldr	r3, [pc, #668]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001a9e:	49a9      	ldr	r1, [pc, #676]	; (8001d44 <HAL_RCC_OscConfig+0x340>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e01e      	b.n	8001ae4 <HAL_RCC_OscConfig+0xe0>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d10e      	bne.n	8001acc <HAL_RCC_OscConfig+0xc8>
 8001aae:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4ba2      	ldr	r3, [pc, #648]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	02c9      	lsls	r1, r1, #11
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4b9f      	ldr	r3, [pc, #636]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0249      	lsls	r1, r1, #9
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xe0>
 8001acc:	4b9b      	ldr	r3, [pc, #620]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ad2:	499b      	ldr	r1, [pc, #620]	; (8001d40 <HAL_RCC_OscConfig+0x33c>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4b98      	ldr	r3, [pc, #608]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b97      	ldr	r3, [pc, #604]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001ade:	4999      	ldr	r1, [pc, #612]	; (8001d44 <HAL_RCC_OscConfig+0x340>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d014      	beq.n	8001b16 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f96e 	bl	8000dcc <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af6:	f7ff f969 	bl	8000dcc <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e2fd      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0xf2>
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f959 	bl	8000dcc <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff f954 	bl	8000dcc <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e2e8      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x11c>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0x14a>
 8001b4c:	e06c      	b.n	8001c28 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	220c      	movs	r2, #12
 8001b54:	4013      	ands	r3, r2
 8001b56:	d00e      	beq.n	8001b76 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d11f      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1a0>
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	23c0      	movs	r3, #192	; 0xc0
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x188>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e2bb      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	22f8      	movs	r2, #248	; 0xf8
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00da      	lsls	r2, r3, #3
 8001b9c:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e041      	b.n	8001c28 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d024      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f908 	bl	8000dcc <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f903 	bl	8000dcc <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e297      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f1      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	22f8      	movs	r2, #248	; 0xf8
 8001be4:	4393      	bics	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00da      	lsls	r2, r3, #3
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e018      	b.n	8001c28 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f8e3 	bl	8000dcc <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f8de 	bl	8000dcc <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e272      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1f1      	bne.n	8001c0c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d019      	beq.n	8001c6e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f8c1 	bl	8000dcc <HAL_GetTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff f8bc 	bl	8000dcc <HAL_GetTick>
 8001c54:	0002      	movs	r2, r0
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e250      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0f1      	beq.n	8001c50 <HAL_RCC_OscConfig+0x24c>
 8001c6c:	e018      	b.n	8001ca0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c74:	2101      	movs	r1, #1
 8001c76:	438a      	bics	r2, r1
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f8a7 	bl	8000dcc <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f8a2 	bl	8000dcc <HAL_GetTick>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e236      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1f1      	bne.n	8001c84 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d100      	bne.n	8001cac <HAL_RCC_OscConfig+0x2a8>
 8001caa:	e0b5      	b.n	8001e18 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	201f      	movs	r0, #31
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d110      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0549      	lsls	r1, r1, #21
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	61da      	str	r2, [r3, #28]
 8001cce:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	055b      	lsls	r3, r3, #21
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x344>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d11a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x344>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x344>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0049      	lsls	r1, r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f866 	bl	8000dcc <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7ff f861 	bl	8000dcc <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1f5      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_OscConfig+0x344>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10f      	bne.n	8001d4c <HAL_RCC_OscConfig+0x348>
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_RCC_OscConfig+0x338>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]
 8001d38:	e036      	b.n	8001da8 <HAL_RCC_OscConfig+0x3a4>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	fffeffff 	.word	0xfffeffff
 8001d44:	fffbffff 	.word	0xfffbffff
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x36a>
 8001d54:	4bca      	ldr	r3, [pc, #808]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4bc9      	ldr	r3, [pc, #804]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	621a      	str	r2, [r3, #32]
 8001d60:	4bc7      	ldr	r3, [pc, #796]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	4bc6      	ldr	r3, [pc, #792]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	2104      	movs	r1, #4
 8001d68:	438a      	bics	r2, r1
 8001d6a:	621a      	str	r2, [r3, #32]
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x3a4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x38c>
 8001d76:	4bc2      	ldr	r3, [pc, #776]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4bc1      	ldr	r3, [pc, #772]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	621a      	str	r2, [r3, #32]
 8001d82:	4bbf      	ldr	r3, [pc, #764]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d84:	6a1a      	ldr	r2, [r3, #32]
 8001d86:	4bbe      	ldr	r3, [pc, #760]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0x3a4>
 8001d90:	4bbb      	ldr	r3, [pc, #748]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d92:	6a1a      	ldr	r2, [r3, #32]
 8001d94:	4bba      	ldr	r3, [pc, #744]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	438a      	bics	r2, r1
 8001d9a:	621a      	str	r2, [r3, #32]
 8001d9c:	4bb8      	ldr	r3, [pc, #736]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4bb7      	ldr	r3, [pc, #732]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	2104      	movs	r1, #4
 8001da4:	438a      	bics	r2, r1
 8001da6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d014      	beq.n	8001dda <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff f80c 	bl	8000dcc <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f807 	bl	8000dcc <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	4aaf      	ldr	r2, [pc, #700]	; (8002084 <HAL_RCC_OscConfig+0x680>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e19a      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dce:	4bac      	ldr	r3, [pc, #688]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x3b6>
 8001dd8:	e013      	b.n	8001e02 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fff7 	bl	8000dcc <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	e009      	b.n	8001df8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7fe fff2 	bl	8000dcc <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	4aa5      	ldr	r2, [pc, #660]	; (8002084 <HAL_RCC_OscConfig+0x680>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e185      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df8:	4ba1      	ldr	r3, [pc, #644]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e02:	231f      	movs	r3, #31
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0c:	4b9c      	ldr	r3, [pc, #624]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	4b9b      	ldr	r3, [pc, #620]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e12:	499d      	ldr	r1, [pc, #628]	; (8002088 <HAL_RCC_OscConfig+0x684>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12a      	bne.n	8001e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e2a:	4b95      	ldr	r3, [pc, #596]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2e:	4b94      	ldr	r3, [pc, #592]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e30:	2104      	movs	r1, #4
 8001e32:	430a      	orrs	r2, r1
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e36:	4b92      	ldr	r3, [pc, #584]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	4b91      	ldr	r3, [pc, #580]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe ffc3 	bl	8000dcc <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e4c:	f7fe ffbe 	bl	8000dcc <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e152      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	2202      	movs	r2, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d0f1      	beq.n	8001e4c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e68:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	22f8      	movs	r2, #248	; 0xf8
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	00da      	lsls	r2, r3, #3
 8001e78:	4b81      	ldr	r3, [pc, #516]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7e:	e034      	b.n	8001eea <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	3305      	adds	r3, #5
 8001e86:	d111      	bne.n	8001eac <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e88:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8c:	4b7c      	ldr	r3, [pc, #496]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e8e:	2104      	movs	r1, #4
 8001e90:	438a      	bics	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e94:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	22f8      	movs	r2, #248	; 0xf8
 8001e9a:	4393      	bics	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	00da      	lsls	r2, r3, #3
 8001ea4:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eaa:	e01e      	b.n	8001eea <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eac:	4b74      	ldr	r3, [pc, #464]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb0:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001eb8:	4b71      	ldr	r3, [pc, #452]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe ff82 	bl	8000dcc <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ece:	f7fe ff7d 	bl	8000dcc <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e111      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ee0:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f1      	bne.n	8001ece <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d05c      	beq.n	8001fae <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	220c      	movs	r2, #12
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d00e      	beq.n	8001f1e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f00:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	220c      	movs	r2, #12
 8001f06:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d114      	bne.n	8001f36 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	401a      	ands	r2, r3
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f1e:	4b58      	ldr	r3, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	4013      	ands	r3, r2
 8001f28:	d040      	beq.n	8001fac <HAL_RCC_OscConfig+0x5a8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d03c      	beq.n	8001fac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0e6      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01b      	beq.n	8001f76 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f3e:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f42:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0249      	lsls	r1, r1, #9
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe ff3e 	bl	8000dcc <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f56:	f7fe ff39 	bl	8000dcc <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0cd      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f68:	4b45      	ldr	r3, [pc, #276]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	029b      	lsls	r3, r3, #10
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x552>
 8001f74:	e01b      	b.n	8001fae <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001f7c:	4943      	ldr	r1, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x688>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff23 	bl	8000dcc <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8c:	f7fe ff1e 	bl	8000dcc <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0b2      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x588>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fac:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d100      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5b4>
 8001fb6:	e0a4      	b.n	8002102 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5c2>
 8001fc4:	e078      	b.n	80020b8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d14c      	bne.n	8002068 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001fd4:	492e      	ldr	r1, [pc, #184]	; (8002090 <HAL_RCC_OscConfig+0x68c>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fef7 	bl	8000dcc <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7fe fef2 	bl	8000dcc <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e086      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	220f      	movs	r2, #15
 8002008:	4393      	bics	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x690>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	431a      	orrs	r2, r3
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0449      	lsls	r1, r1, #17
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fec5 	bl	8000dcc <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fec0 	bl	8000dcc <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e054      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x644>
 8002066:	e04c      	b.n	8002102 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_OscConfig+0x67c>)
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <HAL_RCC_OscConfig+0x68c>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe feaa 	bl	8000dcc <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x6a6>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	40021000 	.word	0x40021000
 8002084:	00001388 	.word	0x00001388
 8002088:	efffffff 	.word	0xefffffff
 800208c:	fffeffff 	.word	0xfffeffff
 8002090:	feffffff 	.word	0xfeffffff
 8002094:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fe98 	bl	8000dcc <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e02c      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_RCC_OscConfig+0x708>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	049b      	lsls	r3, r3, #18
 80020b2:	4013      	ands	r3, r2
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x694>
 80020b6:	e024      	b.n	8002102 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e01f      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x708>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_OscConfig+0x708>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	429a      	cmp	r2, r3
 80020de:	d10e      	bne.n	80020fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	220f      	movs	r2, #15
 80020e4:	401a      	ands	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	23f0      	movs	r3, #240	; 0xf0
 80020f2:	039b      	lsls	r3, r3, #14
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b008      	add	sp, #32
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0bf      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	4013      	ands	r3, r2
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d911      	bls.n	8002156 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	4393      	bics	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0a6      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d015      	beq.n	800218c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2204      	movs	r2, #4
 8002166:	4013      	ands	r3, r2
 8002168:	d006      	beq.n	8002178 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 8002170:	21e0      	movs	r1, #224	; 0xe0
 8002172:	00c9      	lsls	r1, r1, #3
 8002174:	430a      	orrs	r2, r1
 8002176:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	22f0      	movs	r2, #240	; 0xf0
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	d04c      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	4013      	ands	r3, r2
 80021a8:	d120      	bne.n	80021ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07a      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	049b      	lsls	r3, r3, #18
 80021be:	4013      	ands	r3, r2
 80021c0:	d114      	bne.n	80021ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06e      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	4013      	ands	r3, r2
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e062      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e05b      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	4393      	bics	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fde4 	bl	8000dcc <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e009      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe fddf 	bl	8000dcc <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	4a27      	ldr	r2, [pc, #156]	; (80022b4 <HAL_RCC_ClockConfig+0x1a4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e042      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	220c      	movs	r2, #12
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1ec      	bne.n	800220a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d211      	bcs.n	8002262 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x19c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e020      	b.n	80022a4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2204      	movs	r2, #4
 8002268:	4013      	ands	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_RCC_ClockConfig+0x1a8>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002280:	f000 f820 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002284:	0001      	movs	r1, r0
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1a0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_RCC_ClockConfig+0x1ac>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	000a      	movs	r2, r1
 8002296:	40da      	lsrs	r2, r3
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1b0>)
 800229a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800229c:	2003      	movs	r0, #3
 800229e:	f7fe fd4f 	bl	8000d40 <HAL_InitTick>
  
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	00001388 	.word	0x00001388
 80022b8:	fffff8ff 	.word	0xfffff8ff
 80022bc:	08003d10 	.word	0x08003d10
 80022c0:	20000030 	.word	0x20000030

080022c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	220c      	movs	r2, #12
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d046      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0xb8>
 80022ee:	d848      	bhi.n	8002382 <HAL_RCC_GetSysClockFreq+0xbe>
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d002      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x36>
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d003      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x3c>
 80022f8:	e043      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b27      	ldr	r3, [pc, #156]	; (8002398 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022fc:	613b      	str	r3, [r7, #16]
      break;
 80022fe:	e043      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	220f      	movs	r2, #15
 8002306:	4013      	ands	r3, r2
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_RCC_GetSysClockFreq+0xd8>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	220f      	movs	r2, #15
 8002314:	4013      	ands	r3, r2
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	23c0      	movs	r3, #192	; 0xc0
 8002320:	025b      	lsls	r3, r3, #9
 8002322:	401a      	ands	r2, r3
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d109      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	481a      	ldr	r0, [pc, #104]	; (8002398 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002330:	f7fd feea 	bl	8000108 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4353      	muls	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e01a      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	23c0      	movs	r3, #192	; 0xc0
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	401a      	ands	r2, r3
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	429a      	cmp	r2, r3
 800234e:	d109      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002354:	f7fd fed8 	bl	8000108 <__udivsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4353      	muls	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e008      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	480c      	ldr	r0, [pc, #48]	; (8002398 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002368:	f7fd fece 	bl	8000108 <__udivsi3>
 800236c:	0003      	movs	r3, r0
 800236e:	001a      	movs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4353      	muls	r3, r2
 8002374:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	613b      	str	r3, [r7, #16]
      break;
 800237a:	e005      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800237e:	613b      	str	r3, [r7, #16]
      break;
 8002380:	e002      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002384:	613b      	str	r3, [r7, #16]
      break;
 8002386:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002388:	693b      	ldr	r3, [r7, #16]
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b006      	add	sp, #24
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	08003d28 	.word	0x08003d28
 80023a0:	08003d38 	.word	0x08003d38
 80023a4:	02dc6c00 	.word	0x02dc6c00

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000030 	.word	0x20000030

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80023c0:	f7ff fff2 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c4:	0001      	movs	r1, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	40d9      	lsrs	r1, r3
 80023d6:	000b      	movs	r3, r1
}    
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003d20 	.word	0x08003d20

080023e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e042      	b.n	8002480 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	223d      	movs	r2, #61	; 0x3d
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223c      	movs	r2, #60	; 0x3c
 800240a:	2100      	movs	r1, #0
 800240c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe fb91 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223d      	movs	r2, #61	; 0x3d
 800241a:	2102      	movs	r1, #2
 800241c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	0019      	movs	r1, r3
 8002428:	0010      	movs	r0, r2
 800242a:	f000 f9dd 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2246      	movs	r2, #70	; 0x46
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223e      	movs	r2, #62	; 0x3e
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2241      	movs	r2, #65	; 0x41
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2242      	movs	r2, #66	; 0x42
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2243      	movs	r2, #67	; 0x43
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2244      	movs	r2, #68	; 0x44
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2245      	movs	r2, #69	; 0x45
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	223d      	movs	r2, #61	; 0x3d
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	223d      	movs	r2, #61	; 0x3d
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d001      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e036      	b.n	800250e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223d      	movs	r2, #61	; 0x3d
 80024a4:	2102      	movs	r1, #2
 80024a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a16      	ldr	r2, [pc, #88]	; (8002518 <HAL_TIM_Base_Start_IT+0x90>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00a      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x50>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	05db      	lsls	r3, r3, #23
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x50>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_TIM_Base_Start_IT+0x94>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2207      	movs	r2, #7
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d010      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fa:	e007      	b.n	800250c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2101      	movs	r1, #1
 8002508:	430a      	orrs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400

08002520 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <HAL_TIM_Base_Stop_IT+0x54>)
 8002540:	4013      	ands	r3, r2
 8002542:	d10d      	bne.n	8002560 <HAL_TIM_Base_Stop_IT+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <HAL_TIM_Base_Stop_IT+0x58>)
 800254c:	4013      	ands	r3, r2
 800254e:	d107      	bne.n	8002560 <HAL_TIM_Base_Stop_IT+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	438a      	bics	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223d      	movs	r2, #61	; 0x3d
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	00001111 	.word	0x00001111
 8002578:	00000444 	.word	0x00000444

0800257c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2202      	movs	r2, #2
 800258c:	4013      	ands	r3, r2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d124      	bne.n	80025dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	2b02      	cmp	r3, #2
 800259e:	d11d      	bne.n	80025dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2203      	movs	r2, #3
 80025a6:	4252      	negs	r2, r2
 80025a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2203      	movs	r2, #3
 80025b8:	4013      	ands	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f8fa 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e007      	b.n	80025d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f8ed 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f8f9 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2204      	movs	r2, #4
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d125      	bne.n	8002636 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2204      	movs	r2, #4
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d11e      	bne.n	8002636 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2205      	movs	r2, #5
 80025fe:	4252      	negs	r2, r2
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f000 f8cd 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 800261e:	e007      	b.n	8002630 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f8c0 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f8cc 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2208      	movs	r2, #8
 800263e:	4013      	ands	r3, r2
 8002640:	2b08      	cmp	r3, #8
 8002642:	d124      	bne.n	800268e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2208      	movs	r2, #8
 800264c:	4013      	ands	r3, r2
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11d      	bne.n	800268e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2209      	movs	r2, #9
 8002658:	4252      	negs	r2, r2
 800265a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2204      	movs	r2, #4
 8002660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f8a1 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 8002676:	e007      	b.n	8002688 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f894 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f8a0 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2210      	movs	r2, #16
 8002696:	4013      	ands	r3, r2
 8002698:	2b10      	cmp	r3, #16
 800269a:	d125      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2210      	movs	r2, #16
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d11e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2211      	movs	r2, #17
 80026b0:	4252      	negs	r2, r2
 80026b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2208      	movs	r2, #8
 80026b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	23c0      	movs	r3, #192	; 0xc0
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f874 	bl	80027b8 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e007      	b.n	80026e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f867 	bl	80027a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 f873 	bl	80027c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10f      	bne.n	8002716 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	2b01      	cmp	r3, #1
 8002702:	d108      	bne.n	8002716 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2202      	movs	r2, #2
 800270a:	4252      	negs	r2, r2
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fe f801 	bl	8000718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	4013      	ands	r3, r2
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d10f      	bne.n	8002744 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	4013      	ands	r3, r2
 800272e:	2b80      	cmp	r3, #128	; 0x80
 8002730:	d108      	bne.n	8002744 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2281      	movs	r2, #129	; 0x81
 8002738:	4252      	negs	r2, r2
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f8d0 	bl	80028e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	4013      	ands	r3, r2
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d10f      	bne.n	8002772 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	4013      	ands	r3, r2
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d108      	bne.n	8002772 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2241      	movs	r2, #65	; 0x41
 8002766:	4252      	negs	r2, r2
 8002768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f833 	bl	80027d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2220      	movs	r2, #32
 800277a:	4013      	ands	r3, r2
 800277c:	2b20      	cmp	r3, #32
 800277e:	d10f      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	4013      	ands	r3, r2
 800278a:	2b20      	cmp	r3, #32
 800278c:	d108      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	4252      	negs	r2, r2
 8002796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 f89a 	bl	80028d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a30      	ldr	r2, [pc, #192]	; (80028bc <TIM_Base_SetConfig+0xd4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d008      	beq.n	8002812 <TIM_Base_SetConfig+0x2a>
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	429a      	cmp	r2, r3
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0x2a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <TIM_Base_SetConfig+0xd8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d108      	bne.n	8002824 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2270      	movs	r2, #112	; 0x70
 8002816:	4393      	bics	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xd4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d014      	beq.n	8002856 <TIM_Base_SetConfig+0x6e>
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	05db      	lsls	r3, r3, #23
 8002832:	429a      	cmp	r2, r3
 8002834:	d00f      	beq.n	8002856 <TIM_Base_SetConfig+0x6e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <TIM_Base_SetConfig+0xd8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00b      	beq.n	8002856 <TIM_Base_SetConfig+0x6e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <TIM_Base_SetConfig+0xdc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0x6e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <TIM_Base_SetConfig+0xe0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0x6e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <TIM_Base_SetConfig+0xe4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d108      	bne.n	8002868 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <TIM_Base_SetConfig+0xe8>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	4393      	bics	r3, r2
 800286e:	001a      	movs	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <TIM_Base_SetConfig+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0xbe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <TIM_Base_SetConfig+0xe0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0xbe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <TIM_Base_SetConfig+0xe4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d103      	bne.n	80028ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	615a      	str	r2, [r3, #20]
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40002000 	.word	0x40002000
 80028c8:	40014400 	.word	0x40014400
 80028cc:	40014800 	.word	0x40014800
 80028d0:	fffffcff 	.word	0xfffffcff

080028d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e044      	b.n	8002990 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2278      	movs	r2, #120	; 0x78
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe f965 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2224      	movs	r2, #36	; 0x24
 8002922:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fb7c 	bl	8003034 <UART_SetConfig>
 800293c:	0003      	movs	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e024      	b.n	8002990 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 fcaf 	bl	80032b4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	490d      	ldr	r1, [pc, #52]	; (8002998 <HAL_UART_Init+0xa4>)
 8002962:	400a      	ands	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	212a      	movs	r1, #42	; 0x2a
 8002972:	438a      	bics	r2, r1
 8002974:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fd47 	bl	800341c <UART_CheckIdleState>
 800298e:	0003      	movs	r3, r0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}
 8002998:	ffffb7ff 	.word	0xffffb7ff

0800299c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	1dbb      	adds	r3, r7, #6
 80029a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	589b      	ldr	r3, [r3, r2]
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d145      	bne.n	8002a40 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_UART_Receive_IT+0x26>
 80029ba:	1dbb      	adds	r3, r7, #6
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e03d      	b.n	8002a42 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	015b      	lsls	r3, r3, #5
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d109      	bne.n	80029e6 <HAL_UART_Receive_IT+0x4a>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	d001      	beq.n	80029e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e02d      	b.n	8002a42 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fa:	f3ef 8310 	mrs	r3, PRIMASK
 80029fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002a00:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	2301      	movs	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f383 8810 	msr	PRIMASK, r3
}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	04c9      	lsls	r1, r1, #19
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f383 8810 	msr	PRIMASK, r3
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a2e:	1dbb      	adds	r3, r7, #6
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fe02 	bl	8003640 <UART_Start_Receive_IT>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	e000      	b.n	8002a42 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b008      	add	sp, #32
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b0ab      	sub	sp, #172	; 0xac
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	22a4      	movs	r2, #164	; 0xa4
 8002a5c:	18b9      	adds	r1, r7, r2
 8002a5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	20a0      	movs	r0, #160	; 0xa0
 8002a68:	1839      	adds	r1, r7, r0
 8002a6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	219c      	movs	r1, #156	; 0x9c
 8002a74:	1879      	adds	r1, r7, r1
 8002a76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a78:	0011      	movs	r1, r2
 8002a7a:	18bb      	adds	r3, r7, r2
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a99      	ldr	r2, [pc, #612]	; (8002ce4 <HAL_UART_IRQHandler+0x298>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	2298      	movs	r2, #152	; 0x98
 8002a84:	18bc      	adds	r4, r7, r2
 8002a86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a88:	18bb      	adds	r3, r7, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d114      	bne.n	8002aba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00f      	beq.n	8002aba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d00a      	beq.n	8002aba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d100      	bne.n	8002aae <HAL_UART_IRQHandler+0x62>
 8002aac:	e29e      	b.n	8002fec <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	4798      	blx	r3
      }
      return;
 8002ab8:	e298      	b.n	8002fec <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002aba:	2398      	movs	r3, #152	; 0x98
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d100      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x7a>
 8002ac4:	e114      	b.n	8002cf0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ac6:	239c      	movs	r3, #156	; 0x9c
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d106      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ad2:	23a0      	movs	r3, #160	; 0xa0
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a83      	ldr	r2, [pc, #524]	; (8002ce8 <HAL_UART_IRQHandler+0x29c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	d100      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x94>
 8002ade:	e107      	b.n	8002cf0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ae0:	23a4      	movs	r3, #164	; 0xa4
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d012      	beq.n	8002b12 <HAL_UART_IRQHandler+0xc6>
 8002aec:	23a0      	movs	r3, #160	; 0xa0
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2284      	movs	r2, #132	; 0x84
 8002b06:	589b      	ldr	r3, [r3, r2]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2184      	movs	r1, #132	; 0x84
 8002b10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b12:	23a4      	movs	r3, #164	; 0xa4
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d011      	beq.n	8002b42 <HAL_UART_IRQHandler+0xf6>
 8002b1e:	239c      	movs	r3, #156	; 0x9c
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2201      	movs	r2, #1
 8002b26:	4013      	ands	r3, r2
 8002b28:	d00b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2284      	movs	r2, #132	; 0x84
 8002b36:	589b      	ldr	r3, [r3, r2]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2184      	movs	r1, #132	; 0x84
 8002b40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b42:	23a4      	movs	r3, #164	; 0xa4
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d011      	beq.n	8002b72 <HAL_UART_IRQHandler+0x126>
 8002b4e:	239c      	movs	r3, #156	; 0x9c
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2284      	movs	r2, #132	; 0x84
 8002b66:	589b      	ldr	r3, [r3, r2]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2184      	movs	r1, #132	; 0x84
 8002b70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b72:	23a4      	movs	r3, #164	; 0xa4
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d017      	beq.n	8002bae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b7e:	23a0      	movs	r3, #160	; 0xa0
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2220      	movs	r2, #32
 8002b86:	4013      	ands	r3, r2
 8002b88:	d105      	bne.n	8002b96 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b8a:	239c      	movs	r3, #156	; 0x9c
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2284      	movs	r2, #132	; 0x84
 8002ba2:	589b      	ldr	r3, [r3, r2]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2184      	movs	r1, #132	; 0x84
 8002bac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bae:	23a4      	movs	r3, #164	; 0xa4
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_UART_IRQHandler+0x198>
 8002bbc:	23a0      	movs	r3, #160	; 0xa0
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	04db      	lsls	r3, r3, #19
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00c      	beq.n	8002be4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2280      	movs	r2, #128	; 0x80
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2284      	movs	r2, #132	; 0x84
 8002bd8:	589b      	ldr	r3, [r3, r2]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2184      	movs	r1, #132	; 0x84
 8002be2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2284      	movs	r2, #132	; 0x84
 8002be8:	589b      	ldr	r3, [r3, r2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x1a4>
 8002bee:	e1ff      	b.n	8002ff0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf0:	23a4      	movs	r3, #164	; 0xa4
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bfc:	23a0      	movs	r3, #160	; 0xa0
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4013      	ands	r3, r2
 8002c06:	d008      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	0010      	movs	r0, r2
 8002c18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2284      	movs	r2, #132	; 0x84
 8002c1e:	589b      	ldr	r3, [r3, r2]
 8002c20:	2194      	movs	r1, #148	; 0x94
 8002c22:	187a      	adds	r2, r7, r1
 8002c24:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d004      	beq.n	8002c3e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2228      	movs	r2, #40	; 0x28
 8002c3a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c3c:	d047      	beq.n	8002cce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 fdc7 	bl	80037d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d137      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c54:	f3ef 8310 	mrs	r3, PRIMASK
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5c:	2090      	movs	r0, #144	; 0x90
 8002c5e:	183a      	adds	r2, r7, r0
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	2301      	movs	r3, #1
 8002c64:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2140      	movs	r1, #64	; 0x40
 8002c7a:	438a      	bics	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <HAL_UART_IRQHandler+0x2a0>)
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe fcbd 	bl	8001620 <HAL_DMA_Abort_IT>
 8002ca6:	1e03      	subs	r3, r0, #0
 8002ca8:	d01a      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e012      	b.n	8002ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f9a5 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc2:	e00d      	b.n	8002ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f9a0 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e008      	b.n	8002ce0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f99b 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2284      	movs	r2, #132	; 0x84
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002cde:	e187      	b.n	8002ff0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	46c0      	nop			; (mov r8, r8)
    return;
 8002ce2:	e185      	b.n	8002ff0 <HAL_UART_IRQHandler+0x5a4>
 8002ce4:	0000080f 	.word	0x0000080f
 8002ce8:	04000120 	.word	0x04000120
 8002cec:	0800389d 	.word	0x0800389d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d000      	beq.n	8002cfa <HAL_UART_IRQHandler+0x2ae>
 8002cf8:	e139      	b.n	8002f6e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cfa:	23a4      	movs	r3, #164	; 0xa4
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2210      	movs	r2, #16
 8002d02:	4013      	ands	r3, r2
 8002d04:	d100      	bne.n	8002d08 <HAL_UART_IRQHandler+0x2bc>
 8002d06:	e132      	b.n	8002f6e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d08:	23a0      	movs	r3, #160	; 0xa0
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2210      	movs	r2, #16
 8002d10:	4013      	ands	r3, r2
 8002d12:	d100      	bne.n	8002d16 <HAL_UART_IRQHandler+0x2ca>
 8002d14:	e12b      	b.n	8002f6e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d000      	beq.n	8002d2e <HAL_UART_IRQHandler+0x2e2>
 8002d2c:	e09f      	b.n	8002e6e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	217e      	movs	r1, #126	; 0x7e
 8002d38:	187b      	adds	r3, r7, r1
 8002d3a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d100      	bne.n	8002d46 <HAL_UART_IRQHandler+0x2fa>
 8002d44:	e156      	b.n	8002ff4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2258      	movs	r2, #88	; 0x58
 8002d4a:	5a9b      	ldrh	r3, [r3, r2]
 8002d4c:	187a      	adds	r2, r7, r1
 8002d4e:	8812      	ldrh	r2, [r2, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d300      	bcc.n	8002d56 <HAL_UART_IRQHandler+0x30a>
 8002d54:	e14e      	b.n	8002ff4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	187a      	adds	r2, r7, r1
 8002d5a:	215a      	movs	r1, #90	; 0x5a
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d06f      	beq.n	8002e4a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d74:	2301      	movs	r3, #1
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	499e      	ldr	r1, [pc, #632]	; (8003004 <HAL_UART_IRQHandler+0x5b8>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	677b      	str	r3, [r7, #116]	; 0x74
 8002da6:	2301      	movs	r3, #1
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8002dd8:	2301      	movs	r3, #1
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2140      	movs	r1, #64	; 0x40
 8002df0:	438a      	bics	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	2120      	movs	r1, #32
 8002e06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e18:	2301      	movs	r3, #1
 8002e1a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1e:	f383 8810 	msr	PRIMASK, r3
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2110      	movs	r1, #16
 8002e30:	438a      	bics	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3a:	f383 8810 	msr	PRIMASK, r3
}
 8002e3e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fe fbb3 	bl	80015b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2258      	movs	r2, #88	; 0x58
 8002e54:	5a9a      	ldrh	r2, [r3, r2]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	215a      	movs	r1, #90	; 0x5a
 8002e5a:	5a5b      	ldrh	r3, [r3, r1]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0011      	movs	r1, r2
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 f8d8 	bl	800301c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e6c:	e0c2      	b.n	8002ff4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2258      	movs	r2, #88	; 0x58
 8002e72:	5a99      	ldrh	r1, [r3, r2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	225a      	movs	r2, #90	; 0x5a
 8002e78:	5a9b      	ldrh	r3, [r3, r2]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	208e      	movs	r0, #142	; 0x8e
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	1a8a      	subs	r2, r1, r2
 8002e82:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	225a      	movs	r2, #90	; 0x5a
 8002e88:	5a9b      	ldrh	r3, [r3, r2]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d100      	bne.n	8002e92 <HAL_UART_IRQHandler+0x446>
 8002e90:	e0b2      	b.n	8002ff8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002e92:	183b      	adds	r3, r7, r0
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d100      	bne.n	8002e9c <HAL_UART_IRQHandler+0x450>
 8002e9a:	e0ad      	b.n	8002ff8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea4:	2488      	movs	r4, #136	; 0x88
 8002ea6:	193a      	adds	r2, r7, r4
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4951      	ldr	r1, [pc, #324]	; (8003008 <HAL_UART_IRQHandler+0x5bc>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eda:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	2484      	movs	r4, #132	; 0x84
 8002ede:	193a      	adds	r2, r7, r4
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	438a      	bics	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	2120      	movs	r1, #32
 8002f12:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	2480      	movs	r4, #128	; 0x80
 8002f2a:	193a      	adds	r2, r7, r4
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2110      	movs	r1, #16
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f5e:	183b      	adds	r3, r7, r0
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 f858 	bl	800301c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f6c:	e044      	b.n	8002ff8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f6e:	23a4      	movs	r3, #164	; 0xa4
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	035b      	lsls	r3, r3, #13
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d010      	beq.n	8002f9e <HAL_UART_IRQHandler+0x552>
 8002f7c:	239c      	movs	r3, #156	; 0x9c
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	03db      	lsls	r3, r3, #15
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	0352      	lsls	r2, r2, #13
 8002f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 fe7a 	bl	8003c90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f9c:	e02f      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f9e:	23a4      	movs	r3, #164	; 0xa4
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d00f      	beq.n	8002fca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002faa:	23a0      	movs	r3, #160	; 0xa0
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01e      	beq.n	8002ffc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	0010      	movs	r0, r2
 8002fc6:	4798      	blx	r3
    }
    return;
 8002fc8:	e018      	b.n	8002ffc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fca:	23a4      	movs	r3, #164	; 0xa4
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2240      	movs	r2, #64	; 0x40
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00d      	beq.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fc70 	bl	80038ca <UART_EndTransmit_IT>
    return;
 8002fea:	e008      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
      return;
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	e006      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
    return;
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	e004      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
      return;
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	e002      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
      return;
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	e000      	b.n	8002ffe <HAL_UART_IRQHandler+0x5b2>
    return;
 8002ffc:	46c0      	nop			; (mov r8, r8)
  }

}
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b02b      	add	sp, #172	; 0xac
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	fffffeff 	.word	0xfffffeff
 8003008:	fffffedf 	.word	0xfffffedf

0800300c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	000a      	movs	r2, r1
 8003026:	1cbb      	adds	r3, r7, #2
 8003028:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303c:	231e      	movs	r3, #30
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a8d      	ldr	r2, [pc, #564]	; (8003298 <UART_SetConfig+0x264>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a88      	ldr	r2, [pc, #544]	; (800329c <UART_SetConfig+0x268>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <UART_SetConfig+0x26c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a7b      	ldr	r2, [pc, #492]	; (80032a4 <UART_SetConfig+0x270>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d127      	bne.n	800310a <UART_SetConfig+0xd6>
 80030ba:	4b7b      	ldr	r3, [pc, #492]	; (80032a8 <UART_SetConfig+0x274>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	2203      	movs	r2, #3
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d00d      	beq.n	80030e2 <UART_SetConfig+0xae>
 80030c6:	d81b      	bhi.n	8003100 <UART_SetConfig+0xcc>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d014      	beq.n	80030f6 <UART_SetConfig+0xc2>
 80030cc:	d818      	bhi.n	8003100 <UART_SetConfig+0xcc>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0xa4>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d00a      	beq.n	80030ec <UART_SetConfig+0xb8>
 80030d6:	e013      	b.n	8003100 <UART_SetConfig+0xcc>
 80030d8:	231f      	movs	r3, #31
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e021      	b.n	8003126 <UART_SetConfig+0xf2>
 80030e2:	231f      	movs	r3, #31
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e01c      	b.n	8003126 <UART_SetConfig+0xf2>
 80030ec:	231f      	movs	r3, #31
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2204      	movs	r2, #4
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e017      	b.n	8003126 <UART_SetConfig+0xf2>
 80030f6:	231f      	movs	r3, #31
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2208      	movs	r2, #8
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e012      	b.n	8003126 <UART_SetConfig+0xf2>
 8003100:	231f      	movs	r3, #31
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2210      	movs	r2, #16
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e00d      	b.n	8003126 <UART_SetConfig+0xf2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a67      	ldr	r2, [pc, #412]	; (80032ac <UART_SetConfig+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d104      	bne.n	800311e <UART_SetConfig+0xea>
 8003114:	231f      	movs	r3, #31
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e003      	b.n	8003126 <UART_SetConfig+0xf2>
 800311e:	231f      	movs	r3, #31
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	2210      	movs	r2, #16
 8003124:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	429a      	cmp	r2, r3
 8003130:	d15c      	bne.n	80031ec <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003132:	231f      	movs	r3, #31
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d015      	beq.n	8003168 <UART_SetConfig+0x134>
 800313c:	dc18      	bgt.n	8003170 <UART_SetConfig+0x13c>
 800313e:	2b04      	cmp	r3, #4
 8003140:	d00d      	beq.n	800315e <UART_SetConfig+0x12a>
 8003142:	dc15      	bgt.n	8003170 <UART_SetConfig+0x13c>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <UART_SetConfig+0x11a>
 8003148:	2b02      	cmp	r3, #2
 800314a:	d005      	beq.n	8003158 <UART_SetConfig+0x124>
 800314c:	e010      	b.n	8003170 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800314e:	f7ff f935 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003152:	0003      	movs	r3, r0
 8003154:	61bb      	str	r3, [r7, #24]
        break;
 8003156:	e012      	b.n	800317e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <UART_SetConfig+0x27c>)
 800315a:	61bb      	str	r3, [r7, #24]
        break;
 800315c:	e00f      	b.n	800317e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315e:	f7ff f8b1 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8003162:	0003      	movs	r3, r0
 8003164:	61bb      	str	r3, [r7, #24]
        break;
 8003166:	e00a      	b.n	800317e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	61bb      	str	r3, [r7, #24]
        break;
 800316e:	e006      	b.n	800317e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003174:	231e      	movs	r3, #30
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
        break;
 800317c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d100      	bne.n	8003186 <UART_SetConfig+0x152>
 8003184:	e07a      	b.n	800327c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	005a      	lsls	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	18d2      	adds	r2, r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	0019      	movs	r1, r3
 8003198:	0010      	movs	r0, r2
 800319a:	f7fc ffb5 	bl	8000108 <__udivsi3>
 800319e:	0003      	movs	r3, r0
 80031a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d91c      	bls.n	80031e2 <UART_SetConfig+0x1ae>
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	025b      	lsls	r3, r3, #9
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d217      	bcs.n	80031e2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	200e      	movs	r0, #14
 80031b8:	183b      	adds	r3, r7, r0
 80031ba:	210f      	movs	r1, #15
 80031bc:	438a      	bics	r2, r1
 80031be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	085b      	lsrs	r3, r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	b299      	uxth	r1, r3
 80031cc:	183b      	adds	r3, r7, r0
 80031ce:	183a      	adds	r2, r7, r0
 80031d0:	8812      	ldrh	r2, [r2, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	183a      	adds	r2, r7, r0
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	e04c      	b.n	800327c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80031e2:	231e      	movs	r3, #30
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e047      	b.n	800327c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031ec:	231f      	movs	r3, #31
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d015      	beq.n	8003222 <UART_SetConfig+0x1ee>
 80031f6:	dc18      	bgt.n	800322a <UART_SetConfig+0x1f6>
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d00d      	beq.n	8003218 <UART_SetConfig+0x1e4>
 80031fc:	dc15      	bgt.n	800322a <UART_SetConfig+0x1f6>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <UART_SetConfig+0x1d4>
 8003202:	2b02      	cmp	r3, #2
 8003204:	d005      	beq.n	8003212 <UART_SetConfig+0x1de>
 8003206:	e010      	b.n	800322a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff f8d8 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 800320c:	0003      	movs	r3, r0
 800320e:	61bb      	str	r3, [r7, #24]
        break;
 8003210:	e012      	b.n	8003238 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003212:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <UART_SetConfig+0x27c>)
 8003214:	61bb      	str	r3, [r7, #24]
        break;
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003218:	f7ff f854 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 800321c:	0003      	movs	r3, r0
 800321e:	61bb      	str	r3, [r7, #24]
        break;
 8003220:	e00a      	b.n	8003238 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	61bb      	str	r3, [r7, #24]
        break;
 8003228:	e006      	b.n	8003238 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800322e:	231e      	movs	r3, #30
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
        break;
 8003236:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01e      	beq.n	800327c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	085a      	lsrs	r2, r3, #1
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	18d2      	adds	r2, r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0019      	movs	r1, r3
 800324e:	0010      	movs	r0, r2
 8003250:	f7fc ff5a 	bl	8000108 <__udivsi3>
 8003254:	0003      	movs	r3, r0
 8003256:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d90a      	bls.n	8003274 <UART_SetConfig+0x240>
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	025b      	lsls	r3, r3, #9
 8003264:	429a      	cmp	r2, r3
 8003266:	d205      	bcs.n	8003274 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	e003      	b.n	800327c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003274:	231e      	movs	r3, #30
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003288:	231e      	movs	r3, #30
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b008      	add	sp, #32
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	efff69f3 	.word	0xefff69f3
 800329c:	ffffcfff 	.word	0xffffcfff
 80032a0:	fffff4ff 	.word	0xfffff4ff
 80032a4:	40013800 	.word	0x40013800
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40004400 	.word	0x40004400
 80032b0:	007a1200 	.word	0x007a1200

080032b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00b      	beq.n	80032de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a4a      	ldr	r2, [pc, #296]	; (80033f8 <UART_AdvFeatureConfig+0x144>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2202      	movs	r2, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	d00b      	beq.n	8003300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4a43      	ldr	r2, [pc, #268]	; (80033fc <UART_AdvFeatureConfig+0x148>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	2204      	movs	r2, #4
 8003306:	4013      	ands	r3, r2
 8003308:	d00b      	beq.n	8003322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <UART_AdvFeatureConfig+0x14c>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2208      	movs	r2, #8
 8003328:	4013      	ands	r3, r2
 800332a:	d00b      	beq.n	8003344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <UART_AdvFeatureConfig+0x150>)
 8003334:	4013      	ands	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2210      	movs	r2, #16
 800334a:	4013      	ands	r3, r2
 800334c:	d00b      	beq.n	8003366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <UART_AdvFeatureConfig+0x154>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2220      	movs	r2, #32
 800336c:	4013      	ands	r3, r2
 800336e:	d00b      	beq.n	8003388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4a25      	ldr	r2, [pc, #148]	; (800340c <UART_AdvFeatureConfig+0x158>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	4013      	ands	r3, r2
 8003390:	d01d      	beq.n	80033ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <UART_AdvFeatureConfig+0x15c>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	035b      	lsls	r3, r3, #13
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d10b      	bne.n	80033ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <UART_AdvFeatureConfig+0x160>)
 80033be:	4013      	ands	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	4013      	ands	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <UART_AdvFeatureConfig+0x164>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	fffdffff 	.word	0xfffdffff
 80033fc:	fffeffff 	.word	0xfffeffff
 8003400:	fffbffff 	.word	0xfffbffff
 8003404:	ffff7fff 	.word	0xffff7fff
 8003408:	ffffefff 	.word	0xffffefff
 800340c:	ffffdfff 	.word	0xffffdfff
 8003410:	ffefffff 	.word	0xffefffff
 8003414:	ff9fffff 	.word	0xff9fffff
 8003418:	fff7ffff 	.word	0xfff7ffff

0800341c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b092      	sub	sp, #72	; 0x48
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2284      	movs	r2, #132	; 0x84
 8003428:	2100      	movs	r1, #0
 800342a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd fcce 	bl	8000dcc <HAL_GetTick>
 8003430:	0003      	movs	r3, r0
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2208      	movs	r2, #8
 800343c:	4013      	ands	r3, r2
 800343e:	2b08      	cmp	r3, #8
 8003440:	d12c      	bne.n	800349c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0391      	lsls	r1, r2, #14
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4a46      	ldr	r2, [pc, #280]	; (8003564 <UART_CheckIdleState+0x148>)
 800344c:	9200      	str	r2, [sp, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	f000 f88c 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d021      	beq.n	800349c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
 8003462:	2301      	movs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	438a      	bics	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2278      	movs	r2, #120	; 0x78
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e05f      	b.n	800355c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d146      	bne.n	8003538 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	03d1      	lsls	r1, r2, #15
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4a2c      	ldr	r2, [pc, #176]	; (8003564 <UART_CheckIdleState+0x148>)
 80034b4:	9200      	str	r2, [sp, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f000 f858 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d03b      	beq.n	8003538 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c0:	f3ef 8310 	mrs	r3, PRIMASK
 80034c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034c6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	2301      	movs	r3, #1
 80034cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4921      	ldr	r1, [pc, #132]	; (8003568 <UART_CheckIdleState+0x14c>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f2:	f3ef 8310 	mrs	r3, PRIMASK
 80034f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80034f8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
 80034fc:	2301      	movs	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f383 8810 	msr	PRIMASK, r3
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2101      	movs	r1, #1
 8003514:	438a      	bics	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	2120      	movs	r1, #32
 800352a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2278      	movs	r2, #120	; 0x78
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e011      	b.n	800355c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	2120      	movs	r1, #32
 8003544:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2278      	movs	r2, #120	; 0x78
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b010      	add	sp, #64	; 0x40
 8003562:	bd80      	pop	{r7, pc}
 8003564:	01ffffff 	.word	0x01ffffff
 8003568:	fffffedf 	.word	0xfffffedf

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e04b      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	3301      	adds	r3, #1
 8003582:	d048      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fd fc22 	bl	8000dcc <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04b      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2204      	movs	r2, #4
 80035a6:	4013      	ands	r3, r2
 80035a8:	d035      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2208      	movs	r2, #8
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d111      	bne.n	80035dc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2208      	movs	r2, #8
 80035be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f906 	bl	80037d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2284      	movs	r2, #132	; 0x84
 80035cc:	2108      	movs	r1, #8
 80035ce:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2278      	movs	r2, #120	; 0x78
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e02c      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	401a      	ands	r2, r3
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d112      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f8e9 	bl	80037d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2284      	movs	r2, #132	; 0x84
 8003606:	2120      	movs	r1, #32
 8003608:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2278      	movs	r2, #120	; 0x78
 800360e:	2100      	movs	r1, #0
 8003610:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e00f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	425a      	negs	r2, r3
 8003626:	4153      	adcs	r3, r2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	001a      	movs	r2, r3
 800362c:	1dfb      	adds	r3, r7, #7
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0a4      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b090      	sub	sp, #64	; 0x40
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	1dbb      	adds	r3, r7, #6
 800364c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1dba      	adds	r2, r7, #6
 8003658:	2158      	movs	r1, #88	; 0x58
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1dba      	adds	r2, r7, #6
 8003662:	215a      	movs	r1, #90	; 0x5a
 8003664:	8812      	ldrh	r2, [r2, #0]
 8003666:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	015b      	lsls	r3, r3, #5
 8003676:	429a      	cmp	r2, r3
 8003678:	d10d      	bne.n	8003696 <UART_Start_Receive_IT+0x56>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <UART_Start_Receive_IT+0x4c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	225c      	movs	r2, #92	; 0x5c
 8003686:	4950      	ldr	r1, [pc, #320]	; (80037c8 <UART_Start_Receive_IT+0x188>)
 8003688:	5299      	strh	r1, [r3, r2]
 800368a:	e02e      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	225c      	movs	r2, #92	; 0x5c
 8003690:	21ff      	movs	r1, #255	; 0xff
 8003692:	5299      	strh	r1, [r3, r2]
 8003694:	e029      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <UART_Start_Receive_IT+0x7a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <UART_Start_Receive_IT+0x70>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	225c      	movs	r2, #92	; 0x5c
 80036aa:	21ff      	movs	r1, #255	; 0xff
 80036ac:	5299      	strh	r1, [r3, r2]
 80036ae:	e01c      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	225c      	movs	r2, #92	; 0x5c
 80036b4:	217f      	movs	r1, #127	; 0x7f
 80036b6:	5299      	strh	r1, [r3, r2]
 80036b8:	e017      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	055b      	lsls	r3, r3, #21
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10d      	bne.n	80036e2 <UART_Start_Receive_IT+0xa2>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <UART_Start_Receive_IT+0x98>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	225c      	movs	r2, #92	; 0x5c
 80036d2:	217f      	movs	r1, #127	; 0x7f
 80036d4:	5299      	strh	r1, [r3, r2]
 80036d6:	e008      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	225c      	movs	r2, #92	; 0x5c
 80036dc:	213f      	movs	r1, #63	; 0x3f
 80036de:	5299      	strh	r1, [r3, r2]
 80036e0:	e003      	b.n	80036ea <UART_Start_Receive_IT+0xaa>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	225c      	movs	r2, #92	; 0x5c
 80036e6:	2100      	movs	r1, #0
 80036e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2284      	movs	r2, #132	; 0x84
 80036ee:	2100      	movs	r1, #0
 80036f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	2122      	movs	r1, #34	; 0x22
 80036f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	2301      	movs	r3, #1
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2101      	movs	r1, #1
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003722:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	015b      	lsls	r3, r3, #5
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <UART_Start_Receive_IT+0x108>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <UART_Start_Receive_IT+0x18c>)
 8003744:	669a      	str	r2, [r3, #104]	; 0x68
 8003746:	e002      	b.n	800374e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <UART_Start_Receive_IT+0x190>)
 800374c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d019      	beq.n	800378a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	61fb      	str	r3, [r7, #28]
  return(result);
 800375c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	2301      	movs	r3, #1
 8003762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2190      	movs	r1, #144	; 0x90
 8003778:	0049      	lsls	r1, r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	e018      	b.n	80037bc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	613b      	str	r3, [r7, #16]
  return(result);
 8003790:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2120      	movs	r1, #32
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b010      	add	sp, #64	; 0x40
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	000001ff 	.word	0x000001ff
 80037cc:	08003ad9 	.word	0x08003ad9
 80037d0:	08003921 	.word	0x08003921

080037d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08e      	sub	sp, #56	; 0x38
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8310 	mrs	r3, PRIMASK
 80037e0:	617b      	str	r3, [r7, #20]
  return(result);
 80037e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4926      	ldr	r1, [pc, #152]	; (8003898 <UART_EndRxTransfer+0xc4>)
 80037fe:	400a      	ands	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f383 8810 	msr	PRIMASK, r3
}
 800380c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380e:	f3ef 8310 	mrs	r3, PRIMASK
 8003812:	623b      	str	r3, [r7, #32]
  return(result);
 8003814:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003816:	633b      	str	r3, [r7, #48]	; 0x30
 8003818:	2301      	movs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2101      	movs	r1, #1
 8003830:	438a      	bics	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	2b01      	cmp	r3, #1
 8003846:	d118      	bne.n	800387a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003848:	f3ef 8310 	mrs	r3, PRIMASK
 800384c:	60bb      	str	r3, [r7, #8]
  return(result);
 800384e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	2301      	movs	r3, #1
 8003854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2110      	movs	r1, #16
 800386a:	438a      	bics	r2, r1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	2120      	movs	r1, #32
 8003880:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b00e      	add	sp, #56	; 0x38
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	fffffedf 	.word	0xfffffedf

0800389c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	225a      	movs	r2, #90	; 0x5a
 80038ae:	2100      	movs	r1, #0
 80038b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2252      	movs	r2, #82	; 0x52
 80038b6:	2100      	movs	r1, #0
 80038b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	0018      	movs	r0, r3
 80038be:	f7ff fba5 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b004      	add	sp, #16
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80038d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	2301      	movs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2140      	movs	r1, #64	; 0x40
 80038f4:	438a      	bics	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fc ff5e 	bl	80007d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}

08003920 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b094      	sub	sp, #80	; 0x50
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003928:	204e      	movs	r0, #78	; 0x4e
 800392a:	183b      	adds	r3, r7, r0
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	215c      	movs	r1, #92	; 0x5c
 8003930:	5a52      	ldrh	r2, [r2, r1]
 8003932:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	589b      	ldr	r3, [r3, r2]
 800393a:	2b22      	cmp	r3, #34	; 0x22
 800393c:	d000      	beq.n	8003940 <UART_RxISR_8BIT+0x20>
 800393e:	e0ba      	b.n	8003ab6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	214c      	movs	r1, #76	; 0x4c
 8003946:	187b      	adds	r3, r7, r1
 8003948:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800394a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800394c:	187b      	adds	r3, r7, r1
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	183b      	adds	r3, r7, r0
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b2d9      	uxtb	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	400a      	ands	r2, r1
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	225a      	movs	r2, #90	; 0x5a
 8003970:	5a9b      	ldrh	r3, [r3, r2]
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b299      	uxth	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	225a      	movs	r2, #90	; 0x5a
 800397c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	225a      	movs	r2, #90	; 0x5a
 8003982:	5a9b      	ldrh	r3, [r3, r2]
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d000      	beq.n	800398c <UART_RxISR_8BIT+0x6c>
 800398a:	e09c      	b.n	8003ac6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003994:	64bb      	str	r3, [r7, #72]	; 0x48
 8003996:	2301      	movs	r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4948      	ldr	r1, [pc, #288]	; (8003ad0 <UART_RxISR_8BIT+0x1b0>)
 80039ae:	400a      	ands	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	f383 8810 	msr	PRIMASK, r3
}
 80039bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039be:	f3ef 8310 	mrs	r3, PRIMASK
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	647b      	str	r3, [r7, #68]	; 0x44
 80039c8:	2301      	movs	r3, #1
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	f383 8810 	msr	PRIMASK, r3
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	438a      	bics	r2, r1
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	f383 8810 	msr	PRIMASK, r3
}
 80039ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d018      	beq.n	8003a44 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
 8003a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a18:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f383 8810 	msr	PRIMASK, r3
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4928      	ldr	r1, [pc, #160]	; (8003ad4 <UART_RxISR_8BIT+0x1b4>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d12f      	bne.n	8003aac <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
 8003a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a58:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2110      	movs	r1, #16
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d103      	bne.n	8003a9a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2258      	movs	r2, #88	; 0x58
 8003a9e:	5a9a      	ldrh	r2, [r3, r2]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff fab9 	bl	800301c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aaa:	e00c      	b.n	8003ac6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fc fe48 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 8003ab4:	e007      	b.n	8003ac6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b014      	add	sp, #80	; 0x50
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	fffffedf 	.word	0xfffffedf
 8003ad4:	fbffffff 	.word	0xfbffffff

08003ad8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b094      	sub	sp, #80	; 0x50
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ae0:	204e      	movs	r0, #78	; 0x4e
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	215c      	movs	r1, #92	; 0x5c
 8003ae8:	5a52      	ldrh	r2, [r2, r1]
 8003aea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	589b      	ldr	r3, [r3, r2]
 8003af2:	2b22      	cmp	r3, #34	; 0x22
 8003af4:	d000      	beq.n	8003af8 <UART_RxISR_16BIT+0x20>
 8003af6:	e0ba      	b.n	8003c6e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	214c      	movs	r1, #76	; 0x4c
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b02:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	183a      	adds	r2, r7, r0
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	1c9a      	adds	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	225a      	movs	r2, #90	; 0x5a
 8003b28:	5a9b      	ldrh	r3, [r3, r2]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	225a      	movs	r2, #90	; 0x5a
 8003b34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	225a      	movs	r2, #90	; 0x5a
 8003b3a:	5a9b      	ldrh	r3, [r3, r2]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d000      	beq.n	8003b44 <UART_RxISR_16BIT+0x6c>
 8003b42:	e09c      	b.n	8003c7e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b44:	f3ef 8310 	mrs	r3, PRIMASK
 8003b48:	623b      	str	r3, [r7, #32]
  return(result);
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4948      	ldr	r1, [pc, #288]	; (8003c88 <UART_RxISR_16BIT+0x1b0>)
 8003b66:	400a      	ands	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b76:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b80:	2301      	movs	r3, #1
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	2120      	movs	r1, #32
 8003bae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bca:	f3ef 8310 	mrs	r3, PRIMASK
 8003bce:	617b      	str	r3, [r7, #20]
  return(result);
 8003bd0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4928      	ldr	r1, [pc, #160]	; (8003c8c <UART_RxISR_16BIT+0x1b4>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d12f      	bne.n	8003c64 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c10:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c14:	2301      	movs	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	438a      	bics	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2210      	movs	r2, #16
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d103      	bne.n	8003c52 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2210      	movs	r2, #16
 8003c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2258      	movs	r2, #88	; 0x58
 8003c56:	5a9a      	ldrh	r2, [r3, r2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff f9dd 	bl	800301c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c62:	e00c      	b.n	8003c7e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7fc fd6c 	bl	8000744 <HAL_UART_RxCpltCallback>
}
 8003c6c:	e007      	b.n	8003c7e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2108      	movs	r1, #8
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	619a      	str	r2, [r3, #24]
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b014      	add	sp, #80	; 0x50
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	fffffedf 	.word	0xfffffedf
 8003c8c:	fbffffff 	.word	0xfbffffff

08003c90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	4d0c      	ldr	r5, [pc, #48]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca6:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca8:	1b64      	subs	r4, r4, r5
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	42a6      	cmp	r6, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	f000 f821 	bl	8003cf8 <_init>
 8003cb6:	4d0a      	ldr	r5, [pc, #40]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <__libc_init_array+0x44>)
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	42a6      	cmp	r6, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	00b3      	lsls	r3, r6, #2
 8003cc6:	58eb      	ldr	r3, [r5, r3]
 8003cc8:	4798      	blx	r3
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	00b3      	lsls	r3, r6, #2
 8003cd0:	58eb      	ldr	r3, [r5, r3]
 8003cd2:	4798      	blx	r3
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08003d48 	.word	0x08003d48
 8003cdc:	08003d48 	.word	0x08003d48
 8003ce0:	08003d48 	.word	0x08003d48
 8003ce4:	08003d4c 	.word	0x08003d4c

08003ce8 <memset>:
 8003ce8:	0003      	movs	r3, r0
 8003cea:	1882      	adds	r2, r0, r2
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	7019      	strb	r1, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <_init>:
 8003cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfe:	bc08      	pop	{r3}
 8003d00:	469e      	mov	lr, r3
 8003d02:	4770      	bx	lr

08003d04 <_fini>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr
